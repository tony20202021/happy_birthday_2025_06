#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Birthday Bot —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π Hugging Face.
–°–æ–∑–¥–∞–µ—Ç conda –æ–∫—Ä—É–∂–µ–Ω–∏–µ, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –∏ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é.
"""

import os
import sys
import subprocess
import shutil
from pathlib import Path
import yaml

def run_command(command, description):
    """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞."""
    print(f"üîÑ {description}...")
    try:
        result = subprocess.run(command, shell=True, check=True, capture_output=True, text=True)
        print(f"‚úÖ {description} - –≤—ã–ø–æ–ª–Ω–µ–Ω–æ")
        return result.stdout
    except subprocess.CalledProcessError as e:
        print(f"‚ùå {description} - –æ—à–∏–±–∫–∞: {e}")
        print(f"–í—ã–≤–æ–¥: {e.stdout}")
        print(f"–û—à–∏–±–∫–∏: {e.stderr}")
        return None

def check_system_dependencies():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π."""
    print("\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π...")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ conda
    if not shutil.which("conda"):
        print("‚ùå Conda –Ω–µ –Ω–∞–π–¥–µ–Ω–∞! –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ Miniconda –∏–ª–∏ Anaconda.")
        print("üì• –°–∫–∞—á–∞—Ç—å: https://docs.conda.io/en/latest/miniconda.html")
        return False
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ git
    if not shutil.which("git"):
        print("‚ùå Git –Ω–µ –Ω–∞–π–¥–µ–Ω! –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ Git.")
        return False
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ FFmpeg
    if not shutil.which("ffmpeg"):
        print("‚ö†Ô∏è FFmpeg –Ω–µ –Ω–∞–π–¥–µ–Ω! –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞—É–¥–∏–æ.")
        print("Ubuntu/Debian: sudo apt install ffmpeg")
        print("macOS: brew install ffmpeg")
        print("Windows: choco install ffmpeg")
        print("–ú–æ–∂–Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –±–µ–∑ FFmpeg - –æ–Ω –±—É–¥–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —á–µ—Ä–µ–∑ conda.")
    
    print("‚úÖ –û—Å–Ω–æ–≤–Ω—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –ø—Ä–æ–≤–µ—Ä–µ–Ω—ã")
    return True

def create_directories():
    """–°–æ–∑–¥–∞–Ω–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π."""
    print("\nüìÅ –°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π...")
    
    directories = [
        "temp",
        "temp/audio", 
        "temp/images",
        "logs",
        "docs/examples/voice_examples",
        "docs/examples/text_examples",
        "docs/images/screenshots"
    ]
    
    for directory in directories:
        Path(directory).mkdir(parents=True, exist_ok=True)
        print(f"üìÇ –°–æ–∑–¥–∞–Ω–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {directory}")
    
    # –°–æ–∑–¥–∞–µ–º .gitkeep —Ñ–∞–π–ª—ã –¥–ª—è –ø—É—Å—Ç—ã—Ö –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π
    gitkeep_dirs = ["temp/audio", "temp/images", "logs"]
    for directory in gitkeep_dirs:
        gitkeep_file = Path(directory) / ".gitkeep"
        gitkeep_file.touch()

def setup_conda_environment():
    """–°–æ–∑–¥–∞–Ω–∏–µ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ conda –æ–∫—Ä—É–∂–µ–Ω–∏—è."""
    env_name = "amikhalev_hb_2025_06"
    
    print(f"\nüêç –ù–∞—Å—Ç—Ä–æ–π–∫–∞ conda –æ–∫—Ä—É–∂–µ–Ω–∏—è '{env_name}'...")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –æ–∫—Ä—É–∂–µ–Ω–∏–µ
    result = run_command(f"conda info --envs | grep {env_name}", "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –æ–∫—Ä—É–∂–µ–Ω–∏—è")
    
    if result and env_name in result:
        print(f"‚ö†Ô∏è –û–∫—Ä—É–∂–µ–Ω–∏–µ '{env_name}' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
        response = input("–ü–µ—Ä–µ—Å–æ–∑–¥–∞—Ç—å –æ–∫—Ä—É–∂–µ–Ω–∏–µ? (y/N): ").lower()
        if response == 'y':
            run_command(f"conda env remove -n {env_name}", f"–£–¥–∞–ª–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –æ–∫—Ä—É–∂–µ–Ω–∏—è {env_name}")
        else:
            print("‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ")
            return True
    
    # –°–æ–∑–¥–∞–µ–º –æ–∫—Ä—É–∂–µ–Ω–∏–µ –∏–∑ environment.yml
    if Path("environment.yml").exists():
        success = run_command(f"conda env create -f environment.yml", "–°–æ–∑–¥–∞–Ω–∏–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ environment.yml")
    else:
        # –°–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ
        success = run_command(f"conda create -n {env_name} python=3.9 -y", "–°–æ–∑–¥–∞–Ω–∏–µ –±–∞–∑–æ–≤–æ–≥–æ –æ–∫—Ä—É–∂–µ–Ω–∏—è")
        if success:
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ pip
            run_command(f"conda run -n {env_name} pip install -r requirements.txt", "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ Python –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π")
    
    return success is not None

def setup_configuration():
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤."""
    print("\n‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏...")
    
    # –°–æ–∑–¥–∞–µ–º .env —Ñ–∞–π–ª –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
    if not Path(".env").exists():
        if Path(".env.example").exists():
            shutil.copy(".env.example", ".env")
            print("üìù –°–æ–∑–¥–∞–Ω —Ñ–∞–π–ª .env –∏–∑ .env.example")
        else:
            create_basic_env_file()
    
    # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –≤ ~/.ssh/bot.yaml
    config_dir = Path.home() / ".ssh"
    config_dir.mkdir(exist_ok=True)
    config_file = config_dir / "bot.yaml"
    
    if not config_file.exists():
        create_basic_config_file(config_file)
        print(f"üìù –°–æ–∑–¥–∞–Ω —Ñ–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {config_file}")
        print("üîë –ù–µ –∑–∞–±—É–¥—å—Ç–µ —É–∫–∞–∑–∞—Ç—å —Ç–æ–∫–µ–Ω—ã –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω–æ–º —Ñ–∞–π–ª–µ!")

def create_basic_env_file():
    """–°–æ–∑–¥–∞–Ω–∏–µ –±–∞–∑–æ–≤–æ–≥–æ .env —Ñ–∞–π–ª–∞."""
    env_content = """# Birthday Bot Configuration
# –ó–∞–ø–æ–ª–Ω–∏—Ç–µ —Å–≤–æ–∏–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏

# Telegram Bot Token (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)
TELEGRAM_BOT_TOKEN=your_telegram_bot_token_here

# Hugging Face API Key (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)
HUGGINGFACE_API_KEY=your_huggingface_api_key_here

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ Whisper
WHISPER_MODEL=small
WHISPER_DEVICE=cpu
WHISPER_LANGUAGE=ru

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
MAX_VOICE_DURATION=60
RATE_LIMIT_MESSAGES=10

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
LOG_LEVEL=INFO
"""
    
    with open(".env", "w", encoding="utf-8") as f:
        f.write(env_content)

def create_basic_config_file(config_file):
    """–°–æ–∑–¥–∞–Ω–∏–µ –±–∞–∑–æ–≤–æ–≥–æ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞."""
    config_content = {
        "bot": {
            "token": "your_telegram_bot_token_here"
        },
        "huggingface": {
            "api_key": "your_huggingface_api_key_here",
            "model": "black-forest-labs/FLUX.1-dev",
            "timeout": 60
        },
        "whisper": {
            "model": "small",
            "device": "cpu", 
            "language": "ru"
        },
        "security": {
            "max_voice_duration": 60,
            "rate_limit_messages": 10
        },
        "logging": {
            "level": "INFO"
        }
    }
    
    with open(config_file, "w", encoding="utf-8") as f:
        yaml.dump(config_content, f, default_flow_style=False, allow_unicode=True)

def create_run_scripts():
    """–°–æ–∑–¥–∞–Ω–∏–µ —Å–∫—Ä–∏–ø—Ç–æ–≤ –¥–ª—è –∑–∞–ø—É—Å–∫–∞."""
    print("\nüìú –°–æ–∑–¥–∞–Ω–∏–µ —Å–∫—Ä–∏–ø—Ç–æ–≤ –∑–∞–ø—É—Å–∫–∞...")
    
    # –°–∫—Ä–∏–ø—Ç –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
    dev_script = """#!/bin/bash
# –°–∫—Ä–∏–ø—Ç –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –≤ —Ä–µ–∂–∏–º–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏

echo "üöÄ –ó–∞–ø—É—Å–∫ Birthday Bot –≤ —Ä–µ–∂–∏–º–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏..."

# –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º conda –æ–∫—Ä—É–∂–µ–Ω–∏–µ
source $(conda info --base)/etc/profile.d/conda.sh
conda activate amikhalev_hb_2025_06

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
echo "üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏..."
python src/main.py --validate-only

if [ $? -eq 0 ]; then
    echo "‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞"
    echo "üîÑ –ó–∞–ø—É—Å–∫ —Å –∞–≤—Ç–æ–ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–æ–º..."
    python run_bot.py --debug
else
    echo "‚ùå –û—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏."
    exit 1
fi
"""
    
    # –°–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞
    prod_script = """#!/bin/bash
# –°–∫—Ä–∏–ø—Ç –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ

echo "üöÄ –ó–∞–ø—É—Å–∫ Birthday Bot..."

# –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º conda –æ–∫—Ä—É–∂–µ–Ω–∏–µ
source $(conda info --base)/etc/profile.d/conda.sh
conda activate amikhalev_hb_2025_06

# –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
python src/main.py
"""
    
    # –°–æ–∑–¥–∞–µ–º —Å–∫—Ä–∏–ø—Ç—ã
    with open("start_dev.sh", "w") as f:
        f.write(dev_script)
    
    with open("start_prod.sh", "w") as f:
        f.write(prod_script)
    
    # –î–µ–ª–∞–µ–º —Å–∫—Ä–∏–ø—Ç—ã –∏—Å–ø–æ–ª–Ω—è–µ–º—ã–º–∏
    os.chmod("start_dev.sh", 0o755)
    os.chmod("start_prod.sh", 0o755)
    
    print("‚úÖ –°–æ–∑–¥–∞–Ω—ã —Å–∫—Ä–∏–ø—Ç—ã –∑–∞–ø—É—Å–∫–∞: start_dev.sh, start_prod.sh")

def print_next_steps():
    """–í—ã–≤–æ–¥ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π –ø–æ —Å–ª–µ–¥—É—é—â–∏–º —à–∞–≥–∞–º."""
    print("\n" + "="*60)
    print("üéâ –£–°–¢–ê–ù–û–í–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê!")
    print("="*60)
    
    print("\nüìã –°–õ–ï–î–£–Æ–©–ò–ï –®–ê–ì–ò:")
    print("\n1. ü§ñ –°–æ–∑–¥–∞–π—Ç–µ Telegram –±–æ—Ç–∞:")
    print("   ‚Ä¢ –ù–∞–π–¥–∏—Ç–µ @BotFather –≤ Telegram")
    print("   ‚Ä¢ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É /newbot")
    print("   ‚Ä¢ –°–ª–µ–¥—É–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º")
    print("   ‚Ä¢ –°–æ—Ö—Ä–∞–Ω–∏—Ç–µ –ø–æ–ª—É—á–µ–Ω–Ω—ã–π —Ç–æ–∫–µ–Ω")
    
    print("\n2. üîë –ü–æ–ª—É—á–∏—Ç–µ Hugging Face API –∫–ª—é—á:")
    print("   ‚Ä¢ –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å –Ω–∞ https://huggingface.co")
    print("   ‚Ä¢ –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ https://huggingface.co/settings/tokens")
    print("   ‚Ä¢ –°–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—ã–π —Ç–æ–∫–µ–Ω")
    
    print("\n3. ‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é:")
    print("   ‚Ä¢ –û—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–π—Ç–µ ~/.ssh/bot.yaml")
    print("   ‚Ä¢ –ò–ª–∏ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–π—Ç–µ .env —Ñ–∞–π–ª")
    print("   ‚Ä¢ –£–∫–∞–∂–∏—Ç–µ –≤–∞—à–∏ —Ç–æ–∫–µ–Ω—ã")
    
    print("\n4. üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞:")
    print("   ‚Ä¢ –î–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏: ./start_dev.sh")
    print("   ‚Ä¢ –î–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞: ./start_prod.sh")
    print("   ‚Ä¢ –ò–ª–∏ –≤—Ä—É—á–Ω—É—é: conda activate amikhalev_hb_2025_06 && python run_bot.py")
    
    print("\n5. ‚úÖ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ä–∞–±–æ—Ç—É:")
    print("   ‚Ä¢ –û—Ç–ø—Ä–∞–≤—å—Ç–µ /start –≤–∞—à–µ–º—É –±–æ—Ç—É")
    print("   ‚Ä¢ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ")
    print("   ‚Ä¢ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ")
    
    print("\nüìö –ü–û–õ–ï–ó–ù–´–ï –ö–û–ú–ê–ù–î–´:")
    print("   ‚Ä¢ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: python src/main.py --validate-only")
    print("   ‚Ä¢ –ü—Ä–æ—Å–º–æ—Ç—Ä –ª–æ–≥–æ–≤: tail -f logs/*.log")
    print("   ‚Ä¢ –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞: Ctrl+C")
    
    print("\nüîß –§–ê–ô–õ–´ –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–ò:")
    print("   ‚Ä¢ ~/.ssh/bot.yaml - –æ—Å–Ω–æ–≤–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è")
    print("   ‚Ä¢ .env - –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è")
    print("   ‚Ä¢ environment.yml - conda –æ–∫—Ä—É–∂–µ–Ω–∏–µ")
    
    print("\n‚ùì –ü–û–ú–û–©–¨:")
    print("   ‚Ä¢ README.md - –ø–æ–¥—Ä–æ–±–Ω–∞—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è")
    print("   ‚Ä¢ docs/ - –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è")
    print("   ‚Ä¢ GitHub Issues –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏–π –æ –±–∞–≥–∞—Ö")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏."""
    print("üéâ Birthday Bot - –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞")
    print("="*50)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
    if not check_system_dependencies():
        print("\n‚ùå –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞ –∏–∑-–∑–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π")
        sys.exit(1)
    
    # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
    create_directories()
    
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º conda –æ–∫—Ä—É–∂–µ–Ω–∏–µ
    if not setup_conda_environment():
        print("\n‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è conda –æ–∫—Ä—É–∂–µ–Ω–∏—è")
        sys.exit(1)
    
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    setup_configuration()
    
    # –°–æ–∑–¥–∞–µ–º —Å–∫—Ä–∏–ø—Ç—ã –∑–∞–ø—É—Å–∫–∞
    create_run_scripts()
    
    # –í—ã–≤–æ–¥–∏–º —Å–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏
    print_next_steps()

if __name__ == "__main__":
    main()
    