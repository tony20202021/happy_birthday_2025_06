#!/usr/bin/env python
"""
–û—Å–Ω–æ–≤–Ω–æ–π —Ñ–∞–π–ª Telegram –±–æ—Ç–∞ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–æ–∑–¥—Ä–∞–≤–∏—Ç–µ–ª—å–Ω—ã—Ö –∫–∞—Ä—Ç–∏–Ω–æ–∫.
–¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ.
"""

import asyncio
import argparse
import logging
import os
import sys
from pathlib import Path
from datetime import datetime

# –î–æ–±–∞–≤–ª—è–µ–º —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ sys.path –¥–ª—è –∏–º–ø–æ—Ä—Ç–æ–≤
sys.path.insert(0, str(Path(__file__).parent.parent))

# –ò–º–ø–æ—Ä—Ç—ã aiogram 3.x
from aiogram import Bot, Dispatcher
from aiogram.fsm.storage.memory import MemoryStorage
from dotenv import load_dotenv

# –ò–º–ø–æ—Ä—Ç—ã –º–æ–¥—É–ª–µ–π –ø—Ä–æ–µ–∫—Ç–∞
from src.bot.bot_instance import BotManager
from src.bot.handlers import register_handlers
from src.utils.config import config
from src.utils.logger import setup_project_logging, get_module_logger

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env —Ñ–∞–π–ª–∞
load_dotenv()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ª–æ–≥–≥–µ—Ä–∞ (–±—É–¥–µ—Ç –Ω–∞—Å—Ç—Ä–æ–µ–Ω –ø–æ—Å–ª–µ –ø–∞—Ä—Å–∏–Ω–≥–∞ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤)
logger = None

def validate_environment() -> bool:
    """
    –í–∞–ª–∏–¥–∞—Ü–∏—è –æ–∫—Ä—É–∂–µ–Ω–∏—è –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º.
    
    Returns:
        bool: True –µ—Å–ª–∏ –æ–∫—Ä—É–∂–µ–Ω–∏–µ –≤–∞–ª–∏–¥–Ω–æ
    """
    if logger:
        logger.info("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è...")
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤—Å—Ç—Ä–æ–µ–Ω–Ω—É—é –≤–∞–ª–∏–¥–∞—Ü–∏—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    config_errors = config.validate()
    
    if config_errors:
        if logger:
            logger.error("‚ùå –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è –ø—Ä–æ–≤–∞–ª–µ–Ω–∞:")
            for error in config_errors:
                logger.error(f"  - {error}")
        else:
            print("‚ùå –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è –ø—Ä–æ–≤–∞–ª–µ–Ω–∞:")
            for error in config_errors:
                print(f"  - {error}")
        return False
    
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
    missing_deps = []
    
    try:
        import whisper
        if logger:
            logger.info("‚úÖ OpenAI Whisper –¥–æ—Å—Ç—É–ø–µ–Ω")
    except ImportError:
        missing_deps.append("OpenAI Whisper (pip install openai-whisper)")
    
    try:
        import PIL
        if logger:
            logger.info("‚úÖ Pillow –¥–æ—Å—Ç—É–ø–µ–Ω")
    except ImportError:
        missing_deps.append("Pillow (pip install Pillow)")
    
    try:
        import torch
        if logger:
            logger.info("‚úÖ PyTorch –¥–æ—Å—Ç—É–ø–µ–Ω")
    except ImportError:
        missing_deps.append("PyTorch (pip install torch)")
    
    try:
        import diffusers
        if logger:
            logger.info("‚úÖ Diffusers –¥–æ—Å—Ç—É–ø–µ–Ω")
    except ImportError:
        missing_deps.append("Diffusers (pip install diffusers)")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º FFmpeg
    try:
        import imageio_ffmpeg
        ffmpeg_path = imageio_ffmpeg.get_ffmpeg_exe()
        if logger:
            logger.info(f"‚úÖ FFmpeg –¥–æ—Å—Ç—É–ø–µ–Ω: {ffmpeg_path}")
    except ImportError:
        missing_deps.append("imageio-ffmpeg (pip install imageio-ffmpeg)")
    except Exception as e:
        missing_deps.append(f"FFmpeg: {e}")
    
    if missing_deps:
        if logger:
            logger.error("‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏:")
            for dep in missing_deps:
                logger.error(f"  - {dep}")
        else:
            print("‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏:")
            for dep in missing_deps:
                print(f"  - {dep}")
        return False
    
    if logger:
        logger.info("‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ")
    return True

async def on_startup(dispatcher: Dispatcher, bot: Bot) -> None:
    """
    –î–µ–π—Å—Ç–≤–∏—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞.
    
    Args:
        dispatcher: –î–∏—Å–ø–µ—Ç—á–µ—Ä aiogram
        bot: –≠–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
    """
    logger.info("=" * 50)
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ Birthday Bot...")
    logger.info("=" * 50)
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–æ—Ç–µ
    try:
        me = await bot.get_me()
        logger.info(f"ü§ñ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ:")
        logger.info(f"   ID: {me.id}")
        logger.info(f"   –ò–º—è: {me.first_name}")
        logger.info(f"   Username: @{me.username}")
        logger.info(f"   –ú–æ–∂–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –≤ –≥—Ä—É–ø–ø–∞—Ö: {me.can_join_groups}")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–æ—Ç–µ: {e}")
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞
    bot_manager = dispatcher.get("bot_manager")
    if bot_manager:
        try:
            await bot_manager.setup_commands()
            logger.info("‚úÖ –ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞: {e}")
    else:
        logger.warning("‚ö†Ô∏è –ú–µ–Ω–µ–¥–∂–µ—Ä –±–æ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω")
    
    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
    try:
        register_handlers(dispatcher)
        logger.info("‚úÖ –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤: {e}")
        raise
    
    # –õ–æ–≥–∏—Ä—É–µ–º —Å—Ç–∞—Ç—É—Å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    status = config.get_status()
    logger.info("üìä –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã:")
    for key, value in status.items():
        status_icon = "‚úÖ" if value else "‚ùå"
        logger.info(f"   {status_icon} {key}: {value}")
    
    # –û—á–∏—Å—Ç–∫–∞ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–∞
    if config.production.cleanup_on_start:
        try:
            temp_dirs = [
                Path(config.paths.temp_audio),
                Path(config.paths.temp_images)
            ]
            
            cleaned_count = 0
            for temp_dir in temp_dirs:
                if temp_dir.exists():
                    for temp_file in temp_dir.rglob("*"):
                        if temp_file.is_file():
                            try:
                                temp_file.unlink()
                                cleaned_count += 1
                            except Exception:
                                pass
            
            if cleaned_count > 0:
                logger.info(f"üßπ –û—á–∏—â–µ–Ω–æ {cleaned_count} —Å—Ç–∞—Ä—ã—Ö –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤")
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ: {e}")
    
    logger.info("=" * 50)
    logger.info("üéâ –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
    logger.info("=" * 50)

async def on_shutdown(dispatcher: Dispatcher) -> None:
    """
    –î–µ–π—Å—Ç–≤–∏—è –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ –±–æ—Ç–∞.
    
    Args:
        dispatcher: –î–∏—Å–ø–µ—Ç—á–µ—Ä aiogram
    """
    logger.info("=" * 30)
    logger.info("üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞...")
    logger.info("=" * 30)
    
    # –û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
    try:
        temp_dirs = [
            Path(config.paths.temp_audio),
            Path(config.paths.temp_images)
        ]
        
        cleaned_count = 0
        for temp_dir in temp_dirs:
            if temp_dir.exists():
                for temp_file in temp_dir.rglob("*"):
                    if temp_file.is_file():
                        try:
                            temp_file.unlink()
                            cleaned_count += 1
                        except Exception as e:
                            logger.debug(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Ñ–∞–π–ª {temp_file}: {e}")
        
        if cleaned_count > 0:
            logger.info(f"‚úÖ –û—á–∏—â–µ–Ω–æ {cleaned_count} –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤")
        else:
            logger.info("‚úÖ –í—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã —É–∂–µ –æ—á–∏—â–µ–Ω—ã")
            
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤: {e}")
    
    # –û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤ –±–æ—Ç–∞
    try:
        bot_manager = dispatcher.get("bot_manager")
        if bot_manager:
            await bot_manager.cleanup()
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ —Ä–µ—Å—É—Ä—Å–æ–≤ –±–æ—Ç–∞: {e}")
    
    logger.info("üèÅ –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")

async def main() -> None:
    """
    –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∏ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞.
    """
    try:
        # –í–∞–ª–∏–¥–∞—Ü–∏—è –æ–∫—Ä—É–∂–µ–Ω–∏—è (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç config.validate())
        if not validate_environment():
            logger.error("‚ùå –í–∞–ª–∏–¥–∞—Ü–∏—è –æ–∫—Ä—É–∂–µ–Ω–∏—è –ø—Ä–æ–≤–∞–ª–µ–Ω–∞!")
            sys.exit(1)
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        if not config.bot.token or config.bot.token == "YOUR_TELEGRAM_BOT_TOKEN_HERE":
            logger.error("‚ùå –¢–æ–∫–µ–Ω –±–æ—Ç–∞ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω!")
            logger.error("–°–æ–∑–¥–∞–π—Ç–µ —Ñ–∞–π–ª ../../secrets.yaml —Å –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º —Ç–æ–∫–µ–Ω–æ–º")
            sys.exit(1)
        
        logger.info("‚úÖ –¢–æ–∫–µ–Ω –±–æ—Ç–∞ –∑–∞–≥—Ä—É–∂–µ–Ω –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
        
        # –°–æ–∑–¥–∞–Ω–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–≤ –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
        bot = Bot(token=config.bot.token)
        storage = MemoryStorage()
        dp = Dispatcher(storage=storage)
        
        logger.info("‚úÖ –≠–∫–∑–µ–º–ø–ª—è—Ä—ã –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞ —Å–æ–∑–¥–∞–Ω—ã")
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –±–æ—Ç–∞
        bot_manager = BotManager(bot, dp)
        
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ–±—ä–µ–∫—Ç–æ–≤ –≤ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–µ
        dp["bot_manager"] = bot_manager
        dp["bot"] = bot
        dp["config"] = config
        
        # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∑–∞–ø—É—Å–∫–∞ –∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
        dp.startup.register(on_startup)
        dp.shutdown.register(on_shutdown)
        
        logger.info("‚úÖ –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∑–∞–ø—É—Å–∫–∞ –∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã")
        logger.info("üîÑ –ù–∞—á–∞–ª–æ –æ–ø—Ä–æ—Å–∞ —Å–æ–æ–±—â–µ–Ω–∏–π...")
        
        # –ó–∞–ø—É—Å–∫ –æ–ø—Ä–æ—Å–∞
        await dp.start_polling(
            bot,
            skip_updates=True,  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è, –Ω–∞–∫–æ–ø–∏–≤—à–∏–µ—Å—è –∑–∞ –≤—Ä–µ–º—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
        )

    except KeyboardInterrupt:
        logger.info("üî¥ –ü–æ–ª—É—á–µ–Ω–æ –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã")
        raise
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}", exc_info=True)
        sys.exit(1)

if __name__ == "__main__":
    try:
        parser = argparse.ArgumentParser(
            description='Birthday Bot - Telegram –±–æ—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–∑–¥—Ä–∞–≤–∏—Ç–µ–ª—å–Ω—ã—Ö –∫–∞—Ä—Ç–∏–Ω–æ–∫',
            formatter_class=argparse.RawDescriptionHelpFormatter,
            epilog="""
–ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:
  python src/main.py                    # –û–±—ã—á–Ω—ã–π –∑–∞–ø—É—Å–∫
  python src/main.py --debug            # –û—Ç–ª–∞–¥–æ—á–Ω—ã–π —Ä–µ–∂–∏–º  
  python src/main.py --validate-only    # –¢–æ–ª—å–∫–æ –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
            """
        )
        
        # –ê—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
        parser.add_argument('--process-name', type=str, help='–ò–º—è –ø—Ä–æ—Ü–µ—Å—Å–∞ –¥–ª—è –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏')
        parser.add_argument('--debug', action='store_true', help='–í–∫–ª—é—á–∏—Ç—å –æ—Ç–ª–∞–¥–æ—á–Ω—ã–π —Ä–µ–∂–∏–º')
        parser.add_argument('--validate-only', action='store_true', help='–¢–æ–ª—å–∫–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é')
        parser.add_argument('--log-level', type=str, choices=['DEBUG', 'INFO', 'WARNING', 'ERROR'], 
                          help='–£—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è')
        
        args, unknown = parser.parse_known_args()
        
        # –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –æ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –∞—Ä–≥—É–º–µ–Ω—Ç–∞—Ö
        if unknown:
            print(f"‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–µ –∞—Ä–≥—É–º–µ–Ω—Ç—ã: {unknown}")
        
        # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
        log_level = config.logging.level  # –ë–µ—Ä–µ–º –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        if args.debug:
            log_level = "DEBUG"
        elif args.log_level:
            log_level = args.log_level
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞
        setup_project_logging("birthday_bot", log_level)
        logger = get_module_logger("main", log_level)
        
        # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∑–∞–ø—É—Å–∫–µ
        logger.info("üåü ============ BIRTHDAY BOT STARTUP ============ üåü")
        
        if args.process_name:
            logger.info(f"üè∑Ô∏è –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø—Ä–æ—Ü–µ—Å—Å–∞: {args.process_name}")
        
        pid = os.getpid()
        logger.info(f"üÜî ID –ø—Ä–æ—Ü–µ—Å—Å–∞ (PID): {pid}")
        logger.info(f"üìÅ –†–∞–±–æ—á–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {os.getcwd()}")
        logger.info(f"üêç –í–µ—Ä—Å–∏—è Python: {sys.version}")
        logger.info(f"‚è∞ –í—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
        logger.info(f"üìä –£—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è: {log_level}")
        logger.info(f"üîß –†–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã: {'Development' if config.is_development_mode() else 'Production'}")
        
        if args.debug:
            logger.info("üîç –†–µ–∂–∏–º –æ—Ç–ª–∞–¥–∫–∏ –≤–∫–ª—é—á–µ–Ω")
        
        # –†–µ–∂–∏–º —Ç–æ–ª—å–∫–æ –≤–∞–ª–∏–¥–∞—Ü–∏–∏
        if args.validate_only:
            logger.info("üîç –†–µ–∂–∏–º —Ç–æ–ª—å–∫–æ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –≤–∫–ª—é—á–µ–Ω")
            if validate_environment():
                logger.info("‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –≤–∞–ª–∏–¥–Ω–∞ - –±–æ—Ç –≥–æ—Ç–æ–≤ –∫ –∑–∞–ø—É—Å–∫—É")
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
                status = config.get_status()
                logger.info("üìä –°—Ç–∞—Ç—É—Å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏:")
                for key, value in status.items():
                    status_icon = "‚úÖ" if value else "‚ùå"
                    logger.info(f"   {status_icon} {key}: {value}")
                
                sys.exit(0)
            else:
                logger.error("‚ùå –í–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ø—Ä–æ–≤–∞–ª–µ–Ω–∞")
                sys.exit(1)

        # –ó–∞–ø—É—Å–∫ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ü–∏–∫–ª–∞
        asyncio.run(main())
        
    except KeyboardInterrupt:
        if logger:
            logger.info("‚èπÔ∏è –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è")
            logger.info("üîÑ –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ...")
        else:
            print("‚èπÔ∏è –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è")
    except Exception as e:
        if logger:
            logger.error(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ main: {e}", exc_info=True)
        else:
            print(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ main: {e}")
    finally:
        if logger:
            logger.info("üèÅ –ü—Ä–æ—Ü–µ—Å—Å –∑–∞–≤–µ—Ä—à–µ–Ω!")
        else:
            print("üèÅ –ü—Ä–æ—Ü–µ—Å—Å –∑–∞–≤–µ—Ä—à–µ–Ω!")
            