"""
–û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –º–æ–¥—É–ª—å –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–æ–º –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–ø–∏–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
–∏ –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π multi-GPU –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏.
"""

import asyncio
import time
import shutil
from pathlib import Path
from typing import Any, List
import re

from aiogram import Dispatcher, F
from aiogram.filters import Command
from aiogram.types import Message, Voice, InputMediaPhoto
from aiogram.types import FSInputFile
from aiogram.fsm.context import FSMContext

from src.utils.config import config, BOT_MESSAGES
from src.utils.logger import get_handlers_logger
from src.speech.speech_to_text import SpeechToText
from src.image.generator import ImageGenerator

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ª–æ–≥–≥–µ—Ä–∞
logger = get_handlers_logger()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–¥—É–ª–µ–π (–±—É–¥—É—Ç —Å–æ–∑–¥–∞–Ω—ã –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏)
speech_processor = None
image_generator = None

# –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –¥–ª—è —Å–ª—É—á–∞—è –∫–æ–≥–¥–∞ –≤—Å–µ GPU –∑–∞–Ω—è—Ç—ã
class AllGPUsBusyError(Exception):
    """–ò—Å–∫–ª—é—á–µ–Ω–∏–µ –∫–æ–≥–¥–∞ –≤—Å–µ GPU –∑–∞–Ω—è—Ç—ã –∏ –æ—á–µ—Ä–µ–¥—å –ø–µ—Ä–µ–ø–æ–ª–Ω–µ–Ω–∞."""
    pass

def get_speech_processor():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ —Ä–µ—á–∏ (lazy initialization)."""
    global speech_processor
    if speech_processor is None:
        try:
            speech_processor = SpeechToText()
            logger.info("‚úÖ –ú–æ–¥—É–ª—å —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è —Ä–µ—á–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –º–æ–¥—É–ª—è —Ä–µ—á–∏: {e}")
            speech_processor = None
    return speech_processor

def get_image_generator():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π (lazy initialization)."""
    global image_generator
    if image_generator is None:
        try:
            image_generator = ImageGenerator()
            logger.info("‚úÖ –ú–æ–¥—É–ª—å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {e}")
            image_generator = None
    return image_generator

async def send_to_admin(bot, images_dir: str, user_message: Message, original_text: str, is_voice: bool = False, content: str = None) -> None:
    """
    –û—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–ø–∏–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.
    
    Args:
        bot: –≠–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
        images_dir: –ü—É—Ç—å –∫ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏
        user_message: –ò—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        original_text: –¢–µ–∫—Å—Ç –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏—è
        is_voice: True –µ—Å–ª–∏ –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±—ã–ª–æ –≥–æ–ª–æ—Å–æ–≤—ã–º
    """
    if not config.bot.admin_user_id:
        logger.debug("üîá Admin ID –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É")
        return
    
    try:
        user_info = user_message.from_user
        user_name = user_info.full_name
        username = f"@{user_info.username}" if user_info.username else "–±–µ–∑ username"
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        def escape_md(text: str) -> str:
            return re.sub(r'([_*\[\]()~`>#+\-=|{}.!\\])', r'\\\1', text)

        username_safe = escape_md(username)
        original_text_safe = escape_md(original_text[:500])
        content_safe = escape_md(content[:500])
        admin_caption = (
            f"üë§ *–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:* ||{username_safe}||\n"
            f"üí¨ *–¢–µ–∫—Å—Ç:*\n"
            f"||{original_text_safe}{'...' if len(original_text) > 500 else ''}||"
            f"üí¨ *–ü–µ—Ä–µ–≤–æ–¥:*\n"
            f"||{content_safe}{'...' if len(content) > 500 else ''}||"
        )

        # –ü–æ–ª—É—á–∞–µ–º –ø—É—Ç–∏ –∫–æ –≤—Å–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º
        generator = get_image_generator()
        if not generator:
            logger.error("‚ùå –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É")
            return
            
        image_paths = generator.get_image_paths_from_dir(images_dir)
        
        if not image_paths:
            logger.error(f"‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É: {images_dir}")
            return
        
        logger.info(f"üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–ø–∏–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É (ID: {config.bot.admin_user_id})")
        
        # –ï—Å–ª–∏ –æ–¥–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∫ –æ–±—ã—á–Ω–æ–µ —Ñ–æ—Ç–æ
        if len(image_paths) == 1:
            photo = FSInputFile(image_paths[0])
            await bot.send_photo(
                chat_id=config.bot.admin_user_id,
                photo=photo,
                caption=admin_caption,
                parse_mode="MarkdownV2"
            )
            logger.info("‚úÖ –ö–æ–ø–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É (–æ–¥–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ)")
            return
        
        # –ï—Å–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∫ –º–µ–¥–∏–∞-–≥—Ä—É–ø–ø—É
        media_group = []
        for i, image_path in enumerate(image_paths):
            # –ü–µ—Ä–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å –ø–æ–¥–ø–∏—Å—å—é, –æ—Å—Ç–∞–ª—å–Ω—ã–µ –±–µ–∑
            caption = admin_caption if i == 0 else None
            
            media_group.append(
                InputMediaPhoto(
                    media=FSInputFile(image_path),
                    caption=caption,
                    parse_mode="MarkdownV2" if caption else None
                )
            )
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –º–µ–¥–∏–∞-–≥—Ä—É–ø–ø—É
        await bot.send_media_group(
            chat_id=config.bot.admin_user_id,
            media=media_group
        )
        logger.info(f"‚úÖ –ö–æ–ø–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É (–º–µ–¥–∏–∞-–≥—Ä—É–ø–ø–∞ –∏–∑ {len(image_paths)} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π)")
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–ø–∏–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É: {e}")
        # –ù–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –ø—Ä–æ—Ü–µ—Å—Å –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É

async def send_media_group_from_directory(message: Message, images_dir: str) -> bool:
    """
    –û—Ç–ø—Ä–∞–≤–∫–∞ –º–µ–¥–∏–∞-–≥—Ä—É–ø–ø—ã —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏ –∏–∑ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏.
    
    Args:
        message: –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –æ—Ç–≤–µ—Ç–∞
        images_dir: –ü—É—Ç—å –∫ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏
        
    Returns:
        bool: True –µ—Å–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ
    """
    try:
        generator = get_image_generator()
        if not generator:
            logger.error("‚ùå –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
            return False
            
        # –ü–æ–ª—É—á–∞–µ–º –ø—É—Ç–∏ –∫–æ –≤—Å–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º
        image_paths = generator.get_image_paths_from_dir(images_dir)
        
        if not image_paths:
            logger.error(f"‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏: {images_dir}")
            return False
        
        logger.info(f"üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ {len(image_paths)} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π")
        
        # –ï—Å–ª–∏ –æ–¥–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∫ –æ–±—ã—á–Ω–æ–µ —Ñ–æ—Ç–æ
        if len(image_paths) == 1:
            photo = FSInputFile(image_paths[0])
            await message.answer_photo(
                photo=photo,
                caption="üéâ –í–∞—à–∞ –ø–æ–∑–¥—Ä–∞–≤–∏—Ç–µ–ª—å–Ω–∞—è –∫–∞—Ä—Ç–∏–Ω–∫–∞ –≥–æ—Ç–æ–≤–∞!"
            )
            logger.info("‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –æ–¥–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ")
            return True
        
        # –ï—Å–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∫ –º–µ–¥–∏–∞-–≥—Ä—É–ø–ø—É
        media_group = []
        for i, image_path in enumerate(image_paths):
            # –ü–µ—Ä–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å –ø–æ–¥–ø–∏—Å—å—é, –æ—Å—Ç–∞–ª—å–Ω—ã–µ –±–µ–∑
            caption = "üéâ –í–∞—à–∏ –ø–æ–∑–¥—Ä–∞–≤–∏—Ç–µ–ª—å–Ω—ã–µ –∫–∞—Ä—Ç–∏–Ω–∫–∏ –≥–æ—Ç–æ–≤—ã!" if i == 0 else None
            
            media_group.append(
                InputMediaPhoto(
                    media=FSInputFile(image_path),
                    caption=caption
                )
            )
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –º–µ–¥–∏–∞-–≥—Ä—É–ø–ø—É
        await message.answer_media_group(media=media_group)
        logger.info(f"‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –º–µ–¥–∏–∞-–≥—Ä—É–ø–ø–∞ –∏–∑ {len(image_paths)} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π")
        return True
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –º–µ–¥–∏–∞-–≥—Ä—É–ø–ø—ã: {e}")
        return False

async def create_progress_callback(message: Message):
    """–°–æ–∑–¥–∞–Ω–∏–µ callback —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –æ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ."""
    progress_messages = {}
    
    async def progress_callback(message_key: str, **kwargs):
        try:
            progress_text = BOT_MESSAGES["progress"][message_key].format(**kwargs)
            
            if message_key.endswith("_start"):
                progress_msg = await message.answer(progress_text, parse_mode="HTML")
                progress_messages[message_key] = progress_msg.message_id
            
            elif message_key.endswith("_done"):
                start_key = message_key.replace("_done", "_start")
                if start_key in progress_messages:
                    try:
                        await message.bot.answer(
                            text=progress_text,
                            parse_mode="HTML"
                        )
                    except Exception as e:
                        logger.debug(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")
                        await message.answer(progress_text, parse_mode="HTML")
            else:
                await message.answer(progress_text, parse_mode="HTML")
                
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ: {e}")
    
    return progress_callback

def get_expected_speech_time(duration_seconds: int) -> int:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –æ–∂–∏–¥–∞–µ–º–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è —Ä–µ—á–∏."""
    model_name = config.speech.model_name
    device = config.speech.device
    
    if device == "cuda":
        base_multiplier = {
            "tiny": 0.01,
            "base": 0.05, 
            "small": 0.1,
            "medium": 0.2,
            "large": 0.3
        }
    else:  # CPU
        base_multiplier = {
            "tiny": 0.1,
            "base": 0.2,
            "small": 0.3,
            "medium": 0.7,
            "large": 1.0
        }
    
    multiplier = base_multiplier.get(model_name, 1.0)
    expected_time = int((duration_seconds + 1) * multiplier)
    
    return max(expected_time, 3)

def cleanup_images_directory(images_dir: str) -> None:
    """–û—á–∏—Å—Ç–∫–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏."""
    try:
        dir_path = Path(images_dir)
        if dir_path.exists() and dir_path.is_dir():
            shutil.rmtree(dir_path)
            logger.debug(f"üóëÔ∏è –£–¥–∞–ª–µ–Ω–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {images_dir}")
    except Exception as e:
        logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é {images_dir}: {e}")

async def handle_generation_request(message: Message, text: str, is_voice: bool = False):
    """
    –û–±—â–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π multi-GPU.
    
    Args:
        message: –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        text: –¢–µ–∫—Å—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
        is_voice: –ë—ã–ª–æ –ª–∏ –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≥–æ–ª–æ—Å–æ–≤—ã–º
    """
    start_time = time.time()
    
    try:
        progress_callback = await create_progress_callback(message)
        
        generator = get_image_generator()
        if not generator:
            await message.answer("‚ùå –°–µ—Ä–≤–∏—Å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            logger.error(f"‚ùå –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.full_name}")
            return
        
        generator.progress_callback = progress_callback
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å GPU –ø—É–ª–∞
        gpu_status = generator.gpu_pool.get_status()
        translator_status = generator.translator_pool.get_status()
        logger.debug(f"üéÆ GPU —Å—Ç–∞—Ç—É—Å: {gpu_status}")
        logger.debug(f"üî§ –ü–µ—Ä–µ–≤–æ–¥—á–∏–∫ —Å—Ç–∞—Ç—É—Å: {translator_status}")
        
        # –ï—Å–ª–∏ –æ—á–µ—Ä–µ–¥—å –ø–µ—Ä–µ–ø–æ–ª–Ω–µ–Ω–∞ - —É–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if gpu_status["queue_size"] >= config.diffusion.max_queue_size:
            await message.answer(
                f"‚ö†Ô∏è –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç.\n"
                f"–û—á–µ—Ä–µ–¥—å: {gpu_status['queue_size']}/{config.diffusion.max_queue_size}"
            )
            logger.warning(f"‚ö†Ô∏è –û—á–µ—Ä–µ–¥—å –ø–µ—Ä–µ–ø–æ–ª–Ω–µ–Ω–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.full_name}")
            return
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –æ –ø–æ–∑–∏—Ü–∏–∏ –≤ –æ—á–µ—Ä–µ–¥–∏ –µ—Å–ª–∏ –µ—Å—Ç—å –æ–∂–∏–¥–∞–Ω–∏–µ
        total_busy = gpu_status["busy_gpus"] + translator_status["busy_devices"]
        total_devices = gpu_status["total_gpus"] + translator_status["total_devices"]
        
        if gpu_status["available_gpus"] == 0 or translator_status["available_devices"] == 0:
            queue_position = gpu_status["queue_size"] + 1
            await message.answer(
                f"‚è≥ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–æ–≤. –í–∞—à–∞ –ø–æ–∑–∏—Ü–∏—è –≤ –æ—á–µ—Ä–µ–¥–∏: {queue_position}\n"
                f"–ó–∞–Ω—è—Ç–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤: {total_busy}/{total_devices} (GPU + –ø–µ—Ä–µ–≤–æ–¥—á–∏–∫–∏)"
            )
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (–º–æ–∂–µ—Ç –∂–¥–∞—Ç—å –≤ –æ—á–µ—Ä–µ–¥–∏)
        images_dir, content = await generator.generate_birthday_image(text, message.from_user.id)
        
        if images_dir and Path(images_dir).exists():
            await progress_callback("sending_images")
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            success = await send_media_group_from_directory(message, images_dir)
            
            if success:
                processing_time = time.time() - start_time
                logger.info(f"‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {message.from_user.full_name} –∑–∞ {processing_time:.2f}—Å")
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–ø–∏—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
                await send_to_admin(
                    bot=message.bot,
                    images_dir=images_dir,
                    user_message=message,
                    original_text=text,
                    is_voice=is_voice,
                    content=content,
                )
                
                logger.info(
                    f"user_id={message.from_user.id},"
                    f"prompt_length={len(text)},"
                    f"generation_time={processing_time},"
                    f"num_images={config.diffusion.num_images},"
                    f"success={True}"
                )
            else:
                await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
                logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {message.from_user.full_name}")
                
                processing_time = time.time() - start_time
                logger.info(
                    f"user_id={message.from_user.id},"
                    f"prompt_length={len(text)},"
                    f"generation_time={processing_time},"
                    f"num_images={config.diffusion.num_images},"
                    f"success={False}"
                )
            
            # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
            cleanup_images_directory(images_dir)
            
        else:
            await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
            logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.full_name}")
            
            processing_time = time.time() - start_time
            logger.info(
                f"user_id={message.from_user.id},"
                f"prompt_length={len(text)},"
                f"generation_time={processing_time},"
                f"num_images={config.diffusion.num_images},"
                f"success={False}"
            )
        
        total_time = time.time() - start_time
        logger.info(
            f"user_id={message.from_user.id},"
            f"message_type={'voice' if is_voice else 'text'},"
            f"processing_time={total_time}"
        )
        
    except asyncio.QueueFull:
        # –û—á–µ—Ä–µ–¥—å –ø–µ—Ä–µ–ø–æ–ª–Ω–µ–Ω–∞
        await message.answer(
            "‚ö†Ô∏è –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤! –í—Å–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –∑–∞–Ω—è—Ç—ã, –æ—á–µ—Ä–µ–¥—å –ø–µ—Ä–µ–ø–æ–ª–Ω–µ–Ω–∞.\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç."
        )
        logger.warning(f"‚ö†Ô∏è –û—á–µ—Ä–µ–¥—å –ø–µ—Ä–µ–ø–æ–ª–Ω–µ–Ω–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.full_name}")
        
    except Exception as e:
        logger.error(
            f"error={e},"
            f"context={{"
            f'"method": "handle_generation_request",'
            f'"user_id": {message.from_user.id},'
            f'"text_length": {len(text) if text else 0}'
            f"}}"
        )
        await message.answer(BOT_MESSAGES["error"])

async def cmd_start(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start."""
    try:
        await state.clear()
        
        user_info = f"{message.from_user.full_name} (@{message.from_user.username or 'unknown'})"
        logger.info(f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_info} –≤—ã–ø–æ–ª–Ω–∏–ª START_COMMAND")
        
        await message.answer(BOT_MESSAGES["start"], parse_mode="HTML")
        
        logger.info(f"‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {message.from_user.full_name}")
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ cmd_start –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.full_name}: {e}")
        await message.answer(BOT_MESSAGES["error"])

async def cmd_help(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help."""
    try:
        user_info = f"{message.from_user.full_name} (@{message.from_user.username or 'unknown'})"
        logger.info(f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_info} –≤—ã–ø–æ–ª–Ω–∏–ª HELP_COMMAND")
        
        await message.answer(BOT_MESSAGES["help"], parse_mode="HTML")
        
        logger.info(f"‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ —Å–ø—Ä–∞–≤–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {message.from_user.full_name}")
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ cmd_help –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.full_name}: {e}")
        await message.answer(BOT_MESSAGES["error"])

async def handle_text_message(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π."""
    try:
        text_preview = message.text[:50] + "..." if len(message.text) > 50 else message.text
        logger.info(f"üìù –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.full_name} –æ—Ç–ø—Ä–∞–≤–∏–ª TEXT_MESSAGE –¥–ª–∏–Ω–æ–π {len(message.text)} —Å–∏–º–≤–æ–ª–æ–≤")
        logger.debug(f"   –¢–µ–∫—Å—Ç: {text_preview}")
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—â–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
        await handle_generation_request(message, message.text, is_voice=False)
        
    except Exception as e:
        logger.error(
            f"error={e},"
            f"context={{"
            f'"method": "handle_text_message",'
            f'"user_id": {message.from_user.id},'
            f'"text_length": {len(message.text) if message.text else 0}'
            f"}}"
        )
        await message.answer(BOT_MESSAGES["error"])

async def handle_voice_message(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π."""
    start_time = time.time()
    
    try:
        voice: Voice = message.voice
        
        if voice.duration > config.security.max_voice_duration:
            await message.answer(BOT_MESSAGES["voice_too_long"])
            logger.warning(f"‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.full_name} –æ—Ç–ø—Ä–∞–≤–∏–ª —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ ({voice.duration}—Å)")
            return
        
        logger.info(f"üé§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.full_name} –æ—Ç–ø—Ä–∞–≤–∏–ª VOICE_MESSAGE –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å—é {voice.duration}—Å, —Ä–∞–∑–º–µ—Ä–æ–º {voice.file_size} –±–∞–π—Ç")
        
        progress_callback = await create_progress_callback(message)
        
        speech_processor = get_speech_processor()
        if not speech_processor:
            await message.answer("‚ùå –°–µ—Ä–≤–∏—Å —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è —Ä–µ—á–∏ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            logger.error(f"‚ùå –ü—Ä–æ—Ü–µ—Å—Å–æ—Ä —Ä–µ—á–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.full_name}")
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å Whisper –ø—É–ª–∞
        whisper_status = speech_processor.whisper_pool.get_status()
        logger.debug(f"üé§ Whisper —Å—Ç–∞—Ç—É—Å: {whisper_status}")
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –æ –ø–æ–∑–∏—Ü–∏–∏ –≤ –æ—á–µ—Ä–µ–¥–∏ Whisper –µ—Å–ª–∏ –µ—Å—Ç—å –æ–∂–∏–¥–∞–Ω–∏–µ
        if whisper_status["available_devices"] == 0:
            await message.answer(
                f"‚è≥ –í—Å–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è –∑–∞–Ω—è—Ç—ã. –ñ–¥–µ–º —Å–≤–æ–±–æ–¥–Ω–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ...\n"
                f"–ó–∞–Ω—è—Ç–æ: {whisper_status['busy_devices']}/{whisper_status['total_devices']}"
            )
        
        await progress_callback(
            "speech_recognition_start",
            expected_time=get_expected_speech_time(voice.duration)
        )
        
        speech_start_time = time.time()
        recognized_text = await speech_processor.transcribe_telegram_voice(
            bot=message.bot,
            voice_message=voice,
            user_id=message.from_user.id
        )
        speech_time = time.time() - speech_start_time
        
        await progress_callback(
            "speech_recognition_done",
            actual_time=speech_time
        )
        
        if recognized_text:
            logger.info(f"‚úÖ –†–µ—á—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.full_name} —É—Å–ø–µ—à–Ω–æ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–∞ –∑–∞ {speech_time:.2f}—Å")
            logger.debug(f"   –†–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç: {recognized_text}")
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
            await message.answer(
                f"üé§ –†–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç:\n<i>{recognized_text}</i>",
                parse_mode="HTML"
            )
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—â–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
            await handle_generation_request(message, recognized_text, is_voice=True)
        else:
            logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ä–µ—á—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.full_name}")
            await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ä–µ—á—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≥–æ–≤–æ—Ä–∏—Ç—å —á–µ—Ç—á–µ.")
        
        # –õ–æ–≥–∏—Ä—É–µ–º –æ–±—â–µ–µ –≤—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
        total_time = time.time() - start_time
        logger.info(
            f"user_id={message.from_user.id},"
            f"message_type=voice,"
            f"processing_time={total_time}"
        )
        
    except Exception as e:
        logger.error(
            f"error={e},"
            f"context={{"
            f'"method": "handle_voice_message",'
            f'"user_id": {message.from_user.id},'
            f'"voice_duration": {getattr(voice, "duration", "unknown") if "voice" in locals() else "unknown"}'
            f"}}"
        )
        await message.answer(BOT_MESSAGES["error"])

async def handle_unsupported_content(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞."""
    try:
        content_type = "unknown"
        if message.photo:
            content_type = "photo"
        elif message.video:
            content_type = "video"
        elif message.document:
            content_type = "document"
        elif message.sticker:
            content_type = "sticker"
        elif message.animation:
            content_type = "animation"
        elif message.video_note:
            content_type = "video_note"
        elif message.location:
            content_type = "location"
        elif message.contact:
            content_type = "contact"
        
        logger.info(f"‚ùì –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.full_name} –æ—Ç–ø—Ä–∞–≤–∏–ª UNSUPPORTED_CONTENT —Ç–∏–ø–∞: {content_type}")
        
        await message.answer(
            "ü§î –Ø –ø–æ–∫–∞ —É–º–µ—é —Ä–∞–±–æ—Ç–∞—Ç—å —Ç–æ–ª—å–∫–æ —Å —Ç–µ–∫—Å—Ç–æ–≤—ã–º–∏ –∏ –≥–æ–ª–æ—Å–æ–≤—ã–º–∏ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏.\n\n"
            f"üìù –û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ —Ç–µ–∫—Å—Ç —Å –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–µ–º –∏–ª–∏ –∑–∞–ø–∏—à–∏—Ç–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ!\n"
            f"üé® –Ø —Å–æ–∑–¥–∞–º –¥–ª—è –≤–∞—Å {config.diffusion.num_images} –∫—Ä–∞—Å–∏–≤—ã–µ –∫–∞—Ä—Ç–∏–Ω–∫–∏!"
        )
        
    except Exception as e:
        logger.error(
            f"error={e},"
            f"context={{"
            f'"method": "handle_unsupported_content",'
            f'"user_id": {message.from_user.id}'
            f"}}"
        )
        await message.answer(BOT_MESSAGES["error"])

def register_handlers(dp: Dispatcher) -> None:
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤—Å–µ—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏–π."""
    logger.info("üîß –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏–π...")
    
    try:
        # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥
        dp.message.register(cmd_start, Command("start"))
        dp.message.register(cmd_help, Command("help"))
        
        # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
        dp.message.register(handle_voice_message, F.voice)
        dp.message.register(handle_text_message, F.text)
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ (–¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–º)
        dp.message.register(
            handle_unsupported_content,
            F.photo | F.video | F.document | F.sticker | F.animation | 
            F.video_note | F.location | F.contact
        )
        
        logger.info("‚úÖ –í—Å–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã")
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤: {e}")
        raise

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å rate limiting (–∑–∞–≥–ª—É—à–∫–∏ –¥–ª—è –±—É–¥—É—â–µ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏)
async def check_rate_limit(user_id: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    # TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å rate limiting —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º Redis –∏–ª–∏ in-memory cache
    return True

async def update_rate_limit(user_id: int) -> None:
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—á–µ—Ç—á–∏–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    # TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ rate limiting
    pass
