"""
–ú–æ–¥—É–ª—å –º–µ–Ω–µ–¥–∂–µ—Ä–∞ Telegram –±–æ—Ç–∞.
–û—Ç–≤–µ—á–∞–µ—Ç –∑–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–º –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞.
"""

from aiogram import Bot, Dispatcher
from aiogram.types import BotCommand, ChatMember
from aiogram.types import FSInputFile
from typing import List, Union, Dict, Any
from pathlib import Path

from src.utils.logger import get_bot_logger

# –ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞
BOT_COMMANDS = [
    {"command": "start", "description": "üéâ –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º"},
    {"command": "help", "description": "‚ùì –ü–æ–ª—É—á–∏—Ç—å —Å–ø—Ä–∞–≤–∫—É"},
]

class BotManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –±–æ—Ç–∞ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–º –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞."""
    
    def __init__(self, bot: Bot, dp: Dispatcher):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –±–æ—Ç–∞.
        
        Args:
            bot: –≠–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
            dp: –≠–∫–∑–µ–º–ø–ª—è—Ä –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
        """
        self.bot = bot
        self.dp = dp
        self.logger = get_bot_logger()
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ (–±—É–¥–µ—Ç –∑–∞–ø–æ–ª–Ω–µ–Ω–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ)
        self.bot_info = None
        
        self.logger.info("ü§ñ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –º–µ–Ω–µ–¥–∂–µ—Ä –±–æ—Ç–∞")
        
    async def setup_commands(self) -> None:
        """
        –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –º–µ–Ω—é Telegram.
        """
        try:
            commands = [
                BotCommand(command=cmd["command"], description=cmd["description"]) 
                for cmd in BOT_COMMANDS
            ]
            
            await self.bot.set_my_commands(commands)
            self.logger.info(f"‚úÖ –ù–∞—Å—Ç—Ä–æ–µ–Ω–æ {len(commands)} –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞")
            
            # –õ–æ–≥–∏—Ä—É–µ–º —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
            for cmd in commands:
                self.logger.debug(f"   Command: /{cmd.command} - {cmd.description}")
                
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞: {e}")
            raise
    
    async def get_bot_info(self) -> Dict[str, Any]:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–æ—Ç–µ.
        
        Returns:
            dict: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ
        """
        try:
            if self.bot_info is None:
                me = await self.bot.get_me()
                self.bot_info = {
                    "id": me.id,
                    "username": me.username,
                    "first_name": me.first_name,
                    "is_bot": me.is_bot,
                    "can_join_groups": me.can_join_groups,
                    "can_read_all_group_messages": me.can_read_all_group_messages,
                    "supports_inline_queries": me.supports_inline_queries
                }
                
                self.logger.info(f"üìã –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ –ø–æ–ª—É—á–µ–Ω–∞: @{me.username}")
                self.logger.debug(f"   ID: {me.id}")
                self.logger.debug(f"   –ò–º—è: {me.first_name}")
                self.logger.debug(f"   –ú–æ–∂–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –≤ –≥—Ä—É–ø–ø–∞—Ö: {me.can_join_groups}")
            
            return self.bot_info
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–æ—Ç–µ: {e}")
            return {}
    
    async def send_message_safe(self, chat_id: int, text: str, **kwargs) -> bool:
        """
        –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫.
        
        Args:
            chat_id: ID —á–∞—Ç–∞
            text: –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
            **kwargs: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
            
        Returns:
            bool: True –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ
        """
        try:
            await self.bot.send_message(chat_id=chat_id, text=text, **kwargs)
            self.logger.debug(f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ —á–∞—Ç {chat_id}")
            return True
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç {chat_id}: {e}")
            return False
    
    async def send_photo_safe(self, chat_id: int, photo: Union[str, Path, FSInputFile], 
                             caption: str = None, **kwargs) -> bool:
        """
        –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–æ—Ç–æ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫.
        
        Args:
            chat_id: ID —á–∞—Ç–∞
            photo: –§–æ—Ç–æ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ (–ø—É—Ç—å –∫ —Ñ–∞–π–ª—É, Path –∏–ª–∏ FSInputFile)
            caption: –ü–æ–¥–ø–∏—Å—å –∫ —Ñ–æ—Ç–æ
            **kwargs: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
            
        Returns:
            bool: True –µ—Å–ª–∏ —Ñ–æ—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ
        """
        try:
            # –ï—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É, –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ FSInputFile
            if isinstance(photo, (str, Path)):
                photo_path = Path(photo)
                if not photo_path.exists():
                    self.logger.error(f"‚ùå –§–∞–π–ª —Ñ–æ—Ç–æ –Ω–µ –Ω–∞–π–¥–µ–Ω: {photo_path}")
                    return False
                photo = FSInputFile(photo_path)
            
            await self.bot.send_photo(chat_id=chat_id, photo=photo, caption=caption, **kwargs)
            self.logger.debug(f"‚úÖ –§–æ—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ —á–∞—Ç {chat_id}")
            return True
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ç–æ –≤ —á–∞—Ç {chat_id}: {e}")
            return False
    
    async def download_file_safe(self, file_id: str, destination: Union[str, Path]) -> bool:
        """
        –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫.
        
        Args:
            file_id: ID —Ñ–∞–π–ª–∞ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
            destination: –ü—É—Ç—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–∞
            
        Returns:
            bool: True –µ—Å–ª–∏ —Ñ–∞–π–ª —Å–∫–∞—á–∞–Ω —É—Å–ø–µ—à–Ω–æ
        """
        try:
            file = await self.bot.get_file(file_id)
            await self.bot.download_file(file.file_path, destination)
            self.logger.debug(f"‚úÖ –§–∞–π–ª {file_id} —Å–∫–∞—á–∞–Ω –≤ {destination}")
            return True
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞ {file_id}: {e}")
            return False
    
    def get_user_info_string(self, user) -> str:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç—Ä–æ–∫–æ–≤–æ–≥–æ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ.
        
        Args:
            user: –û–±—ä–µ–∫—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Telegram
            
        Returns:
            str: –°—Ç—Ä–æ–∫–æ–≤–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        """
        username = f"@{user.username}" if user.username else "–±–µ–∑ username"
        full_name = f"{user.first_name}"
        if user.last_name:
            full_name += f" {user.last_name}"
        
        return f"{full_name} ({username}, ID: {user.id})"
    
    async def log_user_interaction(self, user, message_type: str, content_preview: str = ""):
        """
        –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.
        
        Args:
            user: –û–±—ä–µ–∫—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Telegram
            message_type: –¢–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è
            content_preview: –ü—Ä–µ–≤—å—é —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ
        """
        user_info = self.get_user_info_string(user)
        
        log_message = f"USER_INTERACTION | {user_info} | TYPE: {message_type}"
        if content_preview:
            # –û–±—Ä–µ–∑–∞–µ–º –ø—Ä–µ–≤—å—é –¥–æ 100 —Å–∏–º–≤–æ–ª–æ–≤
            preview = content_preview[:100] + "..." if len(content_preview) > 100 else content_preview
            log_message += f" | PREVIEW: {preview}"
        
        self.logger.info(log_message)
    
    async def get_chat_member_count(self, chat_id: int) -> int:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —á–∞—Ç–∞.
        
        Args:
            chat_id: ID —á–∞—Ç–∞
            
        Returns:
            int: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∏–ª–∏ -1 –ø—Ä–∏ –æ—à–∏–±–∫–µ
        """
        try:
            count = await self.bot.get_chat_member_count(chat_id)
            self.logger.debug(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≤ —á–∞—Ç–µ {chat_id}: {count}")
            return count
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —á–∞—Ç–∞ {chat_id}: {e}")
            return -1
    
    async def check_bot_permissions(self, chat_id: int) -> Dict[str, Any]:
        """
        –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π –±–æ—Ç–∞ –≤ —á–∞—Ç–µ.
        
        Args:
            chat_id: ID —á–∞—Ç–∞
            
        Returns:
            dict: –°–ª–æ–≤–∞—Ä—å —Å —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è–º–∏ –±–æ—Ç–∞
        """
        try:
            me = await self.bot.get_me()
            chat_member: ChatMember = await self.bot.get_chat_member(chat_id, me.id)
            
            permissions = {
                "status": chat_member.status,
                "can_send_messages": getattr(chat_member, "can_send_messages", True),
                "can_send_media_messages": getattr(chat_member, "can_send_media_messages", True),
                "can_send_other_messages": getattr(chat_member, "can_send_other_messages", True),
                "can_add_web_page_previews": getattr(chat_member, "can_add_web_page_previews", True),
            }
            
            self.logger.debug(f"–†–∞–∑—Ä–µ—à–µ–Ω–∏—è –±–æ—Ç–∞ –≤ —á–∞—Ç–µ {chat_id}: {permissions}")
            return permissions
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π –≤ —á–∞—Ç–µ {chat_id}: {e}")
            return {"status": "unknown", "error": str(e)}
    
    async def get_chat_info(self, chat_id: int) -> Dict[str, Any]:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —á–∞—Ç–µ.
        
        Args:
            chat_id: ID —á–∞—Ç–∞
            
        Returns:
            dict: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —á–∞—Ç–µ
        """
        try:
            chat = await self.bot.get_chat(chat_id)
            
            chat_info = {
                "id": chat.id,
                "type": chat.type,
                "title": getattr(chat, "title", None),
                "username": getattr(chat, "username", None),
                "first_name": getattr(chat, "first_name", None),
                "last_name": getattr(chat, "last_name", None),
                "description": getattr(chat, "description", None),
            }
            
            self.logger.debug(f"–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —á–∞—Ç–µ {chat_id}: {chat_info}")
            return chat_info
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —á–∞—Ç–µ {chat_id}: {e}")
            return {"id": chat_id, "error": str(e)}
    
    async def send_typing_action(self, chat_id: int) -> bool:
        """
        –û—Ç–ø—Ä–∞–≤–∫–∞ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞ –ø–µ—á–∞—Ç–∏.
        
        Args:
            chat_id: ID —á–∞—Ç–∞
            
        Returns:
            bool: True –µ—Å–ª–∏ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ
        """
        try:
            await self.bot.send_chat_action(chat_id=chat_id, action="typing")
            return True
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞ –ø–µ—á–∞—Ç–∏ –≤ —á–∞—Ç {chat_id}: {e}")
            return False
    
    async def send_upload_photo_action(self, chat_id: int) -> bool:
        """
        –û—Ç–ø—Ä–∞–≤–∫–∞ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ.
        
        Args:
            chat_id: ID —á–∞—Ç–∞
            
        Returns:
            bool: True –µ—Å–ª–∏ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ
        """
        try:
            await self.bot.send_chat_action(chat_id=chat_id, action="upload_photo")
            return True
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ –≤ —á–∞—Ç {chat_id}: {e}")
            return False
    
    def get_dispatcher(self) -> Dispatcher:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞.
        
        Returns:
            Dispatcher: –î–∏—Å–ø–µ—Ç—á–µ—Ä
        """
        return self.dp
    
    def get_bot(self) -> Bot:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –±–æ—Ç–∞.
        
        Returns:
            Bot: –ë–æ—Ç
        """
        return self.bot
    
    async def get_file_info(self, file_id: str) -> Dict[str, Any]:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ñ–∞–π–ª–µ.
        
        Args:
            file_id: ID —Ñ–∞–π–ª–∞
            
        Returns:
            dict: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ñ–∞–π–ª–µ
        """
        try:
            file = await self.bot.get_file(file_id)
            file_info = {
                "file_id": file.file_id,
                "file_unique_id": file.file_unique_id,
                "file_size": file.file_size,
                "file_path": file.file_path,
            }
            
            self.logger.debug(f"–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ñ–∞–π–ª–µ {file_id}: {file_info}")
            return file_info
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ñ–∞–π–ª–µ {file_id}: {e}")
            return {"file_id": file_id, "error": str(e)}
    
    async def delete_message_safe(self, chat_id: int, message_id: int) -> bool:
        """
        –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è.
        
        Args:
            chat_id: ID —á–∞—Ç–∞
            message_id: ID —Å–æ–æ–±—â–µ–Ω–∏—è
            
        Returns:
            bool: True –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ
        """
        try:
            await self.bot.delete_message(chat_id=chat_id, message_id=message_id)
            self.logger.debug(f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ {message_id} —É–¥–∞–ª–µ–Ω–æ –∏–∑ —á–∞—Ç–∞ {chat_id}")
            return True
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è {message_id} –∏–∑ —á–∞—Ç–∞ {chat_id}: {e}")
            return False
    
    async def edit_message_safe(self, chat_id: int, message_id: int, text: str, **kwargs) -> bool:
        """
        –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è.
        
        Args:
            chat_id: ID —á–∞—Ç–∞
            message_id: ID —Å–æ–æ–±—â–µ–Ω–∏—è
            text: –ù–æ–≤—ã–π —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
            **kwargs: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
            
        Returns:
            bool: True –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–æ —É—Å–ø–µ—à–Ω–æ
        """
        try:
            await self.bot.edit_message_text(
                chat_id=chat_id,
                message_id=message_id,
                text=text,
                **kwargs
            )
            self.logger.debug(f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ {message_id} –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–æ –≤ —á–∞—Ç–µ {chat_id}")
            return True
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è {message_id} –≤ —á–∞—Ç–µ {chat_id}: {e}")
            return False
    
    async def get_status(self) -> Dict[str, Any]:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –±–æ—Ç–∞.
        
        Returns:
            dict: –°—Ç–∞—Ç—É—Å –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
        """
        try:
            bot_info = await self.get_bot_info()
            
            return {
                "bot_connected": bool(bot_info),
                "bot_username": bot_info.get("username", "unknown"),
                "bot_id": bot_info.get("id", "unknown"),
                "dispatcher_running": self.dp is not None,
                "commands_count": len(BOT_COMMANDS)
            }
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞: {e}")
            return {
                "bot_connected": False,
                "error": str(e)
            }
    
    async def cleanup(self):
        """
        –û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ –±–æ—Ç–∞.
        """
        try:
            self.logger.info("üßπ –ù–∞—á–∏–Ω–∞–µ–º –æ—á–∏—Å—Ç–∫—É —Ä–µ—Å—É—Ä—Å–æ–≤ –±–æ—Ç–∞...")
            
            # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–µ—Å—Å–∏—é –±–æ—Ç–∞
            if hasattr(self.bot, 'session') and self.bot.session:
                await self.bot.session.close()
                self.logger.debug("‚úÖ –°–µ—Å—Å–∏—è –±–æ—Ç–∞ –∑–∞–∫—Ä—ã—Ç–∞")
            
            # –û—á–∏—â–∞–µ–º –∫—ç—à –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–æ—Ç–µ
            self.bot_info = None
            
            self.logger.info("‚úÖ –†–µ—Å—É—Ä—Å—ã –±–æ—Ç–∞ –æ—á–∏—â–µ–Ω—ã")
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ —Ä–µ—Å—É—Ä—Å–æ–≤: {e}")
    
    def __str__(self) -> str:
        """–°—Ç—Ä–æ–∫–æ–≤–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –±–æ—Ç–∞."""
        if self.bot_info:
            return f"BotManager(@{self.bot_info.get('username', 'unknown')})"
        return "BotManager(not_initialized)"
    
    def __repr__(self) -> str:
        """–ü—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏."""
        return f"BotManager(bot={self.bot}, dp={self.dp})"
        