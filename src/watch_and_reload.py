#!/usr/bin/env python
"""
–°–∫—Ä–∏–ø—Ç –∑–∞–ø—É—Å–∫–∞ Telegram –±–æ—Ç–∞ —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–æ–º –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö.
–ò—Å–ø–æ–ª—å–∑—É–µ—Ç watchdog –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Ñ–∞–π–ª–æ–≤ –∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞.
"""

import time
import subprocess
import os
import sys
import signal
import argparse
from pathlib import Path
from typing import List, Optional

from watchdog.observers import Observer
from watchdog.events import FileSystemEventHandler, FileModifiedEvent, FileCreatedEvent

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ –º–æ–¥—É–ª–µ–π –ø—Ä–æ–µ–∫—Ç–∞ (–ø–æ–¥–Ω–∏–º–∞–µ–º—Å—è –Ω–∞ —É—Ä–æ–≤–µ–Ω—å –≤—ã—à–µ –∏–∑ src)
sys.path.insert(0, str(Path(__file__).parent.parent))

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è Birthday Bot
from src.utils.logger import get_bot_logger
logger = get_bot_logger()

class BotProcess:
    """–ö–ª–∞—Å—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–æ–º –±–æ—Ç–∞."""
    
    def __init__(self, script_path: str, process_name: str):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞ –±–æ—Ç–∞.
        
        Args:
            script_path: –ü—É—Ç—å –∫ —Å–∫—Ä–∏–ø—Ç—É –±–æ—Ç–∞
            process_name: –ò–º—è –ø—Ä–æ—Ü–µ—Å—Å–∞ –¥–ª—è –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
        """
        self.script_path = script_path
        self.process_name = process_name
        self.process = None
        self.running = False
    
    def start(self) -> None:
        """–ó–∞–ø—É—Å–∫ –ø—Ä–æ—Ü–µ—Å—Å–∞ –±–æ—Ç–∞."""
        if self.running:
            logger.info("–ü—Ä–æ—Ü–µ—Å—Å —É–∂–µ –∑–∞–ø—É—â–µ–Ω. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–ø—É—Å–∫.")
            return
            
        try:
            logger.info(f"{'='*50}")
            logger.info(f"–ó–∞–ø—É—Å–∫ –ø—Ä–æ—Ü–µ—Å—Å–∞ –±–æ—Ç–∞: {self.script_path}")
            self.process = subprocess.Popen(
                ["python", self.script_path, f"--process-name={self.process_name}"],
                stdout=sys.stdout,
                stderr=sys.stderr
            )
            self.running = True
            logger.info(f"–ü—Ä–æ—Ü–µ—Å—Å –±–æ—Ç–∞ –∑–∞–ø—É—â–µ–Ω —Å PID: {self.process.pid}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –ø—Ä–æ—Ü–µ—Å—Å–∞ –±–æ—Ç–∞: {e}")
    
    def stop(self) -> None:
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–æ—Ü–µ—Å—Å–∞ –±–æ—Ç–∞."""
        if not self.running or not self.process:
            logger.info("–ù–µ—Ç –∑–∞–ø—É—â–µ–Ω–Ω–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏.")
            return
            
        try:
            logger.info(f"–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–æ—Ü–µ—Å—Å–∞ –±–æ—Ç–∞ —Å PID: {self.process.pid}")
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º SIGTERM –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
            self.process.send_signal(signal.SIGTERM)
            
            # –î–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å—É –≤—Ä–µ–º—è –Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ
            for _ in range(5):
                if self.process.poll() is not None:
                    break
                time.sleep(1)
            
            # –ï—Å–ª–∏ –ø—Ä–æ—Ü–µ—Å—Å –≤—Å–µ –µ—â–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–≤–µ—Ä—à–∞–µ–º
            if self.process.poll() is None:
                logger.warning("–ü—Ä–æ—Ü–µ—Å—Å –Ω–µ –∑–∞–≤–µ—Ä—à–∏–ª—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º SIGKILL.")
                self.process.kill()
                self.process.wait()
            
            self.running = False
            logger.info("–ü—Ä–æ—Ü–µ—Å—Å –±–æ—Ç–∞ —É—Å–ø–µ—à–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø—Ä–æ—Ü–µ—Å—Å–∞ –±–æ—Ç–∞: {e}")
            self.running = False
    
    def restart(self) -> None:
        """–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –ø—Ä–æ—Ü–µ—Å—Å–∞ –±–æ—Ç–∞."""
        logger.info(f"{'='*50}")
        logger.info("–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –ø—Ä–æ—Ü–µ—Å—Å–∞ –±–æ—Ç–∞...")
        self.stop()
        time.sleep(2)  # –ü–∞—É–∑–∞ –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ—Ö –ø–æ–¥–ø—Ä–æ—Ü–µ—Å—Å–æ–≤
        self.start()


class ChangeHandler(FileSystemEventHandler):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–±—ã—Ç–∏–π —Ñ–∞–π–ª–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã."""
    
    def __init__(self, bot_process: BotProcess, watch_extensions: List[str], ignore_dirs: List[str]):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π.
        
        Args:
            bot_process: –ü—Ä–æ—Ü–µ—Å—Å –±–æ—Ç–∞ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
            watch_extensions: –°–ø–∏—Å–æ–∫ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–π —Ñ–∞–π–ª–æ–≤ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è
            ignore_dirs: –°–ø–∏—Å–æ–∫ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π –¥–ª—è –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω–∏—è
        """
        self.bot_process = bot_process
        self.watch_extensions = watch_extensions
        self.ignore_dirs = ignore_dirs
        self.last_modified_time = time.time()
        self.throttle_interval = 5  # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª –º–µ–∂–¥—É –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–º–∏
    
    def should_process_event(self, event) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä–∫–∞, –¥–æ–ª–∂–Ω–æ –ª–∏ —Å–æ–±—ã—Ç–∏–µ –±—ã—Ç—å –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ.
        
        Args:
            event: –°–æ–±—ã—Ç–∏–µ —Ñ–∞–π–ª–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã
        
        Returns:
            True –µ—Å–ª–∏ —Å–æ–±—ã—Ç–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ
        """
        current_time = time.time()
        if current_time - self.last_modified_time < self.throttle_interval:
            return False
            
        if not isinstance(event, (FileModifiedEvent, FileCreatedEvent)):
            return False
            
        if not any(event.src_path.endswith(ext) for ext in self.watch_extensions):
            return False
            
        if any(ignore_dir in event.src_path for ignore_dir in self.ignore_dirs):
            return False
            
        return True
    
    def on_modified(self, event):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–±—ã—Ç–∏—è –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–∏ —Ñ–∞–π–ª–∞."""
        if self.should_process_event(event):
            logger.info(f"–û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –≤ —Ñ–∞–π–ª–µ: {event.src_path}")
            self.last_modified_time = time.time()
            self.bot_process.restart()
    
    def on_created(self, event):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–±—ã—Ç–∏—è —Å–æ–∑–¥–∞–Ω–∏—è —Ñ–∞–π–ª–∞."""
        if self.should_process_event(event):
            logger.info(f"–û–±–Ω–∞—Ä—É–∂–µ–Ω –Ω–æ–≤—ã–π —Ñ–∞–π–ª: {event.src_path}")
            self.last_modified_time = time.time()
            self.bot_process.restart()


def cleanup_and_exit():
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è."""
    logger.info("–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è. –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å—ã...")
    # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å—ã Python
    os.system("pkill -f 'python src/main.py'")
    sys.exit(0)


def run_watcher():
    """–ó–∞–ø—É—Å–∫ —Ñ–∞–π–ª–æ–≤–æ–≥–æ –Ω–∞–±–ª—é–¥–∞—Ç–µ–ª—è."""
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    script_path = "src/main.py"
    watch_paths = ["./", "src", "docs"]
    process_name = "birthday_bot_autoreload"
    watch_extensions = ['.py', '.yaml', '.yml', '.json']
    ignore_dirs = ['__pycache__', '.git', 'env', 'venv', '.env', '.venv', 'logs']
    
    logger.info(f"–ó–∞–ø—É—Å–∫ –Ω–∞–±–ª—é–¥–∞—Ç–µ–ª—è –¥–ª—è —Å–∫—Ä–∏–ø—Ç–∞: {script_path}")
    logger.info(f"–û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏: {watch_paths}")
    logger.info(f"–û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è: {watch_extensions}")
    logger.info(f"–ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º—ã–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏: {ignore_dirs}")
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –ø—Ä–æ—Ü–µ—Å—Å–∞ –±–æ—Ç–∞
    bot_process = BotProcess(script_path, process_name)
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ —Å–æ–±—ã—Ç–∏–π
    event_handler = ChangeHandler(bot_process, watch_extensions, ignore_dirs)
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –Ω–∞–±–ª—é–¥–∞—Ç–µ–ª—è
    observer = Observer()
    
    # –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π
    for path in watch_paths:
        path_obj = Path(path)
        if path_obj.exists() and path_obj.is_dir():
            observer.schedule(event_handler, path, recursive=True)
            logger.info(f"–û—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç—Å—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {path}")
        else:
            logger.warning(f"–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {path}")
    
    # –ó–∞–ø—É—Å–∫ –Ω–∞–±–ª—é–¥–∞—Ç–µ–ª—è
    observer.start()
    
    # –ü–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω—ã–π –∑–∞–ø—É—Å–∫ –±–æ—Ç–∞
    bot_process.start()
    
    # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–∏–≥–Ω–∞–ª–æ–≤
    signal.signal(signal.SIGINT, lambda s, f: cleanup_and_exit())
    signal.signal(signal.SIGTERM, lambda s, f: cleanup_and_exit())
    
    try:
        while True:
            time.sleep(1)
    except KeyboardInterrupt:
        logger.info("–ü–æ–ª—É—á–µ–Ω–æ –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã. –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º...")
        bot_process.stop()
        observer.stop()
    
    observer.join()
    logger.info("–ù–∞–±–ª—é–¥–∞—Ç–µ–ª—å –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–æ–º')
    parser.add_argument('--debug', action='store_true', help='–í–∫–ª—é—á–∏—Ç—å –æ—Ç–ª–∞–¥–æ—á–Ω—ã–π —Ä–µ–∂–∏–º')
    
    args = parser.parse_args()
    
    if args.debug:
        from src.utils.logger import set_global_log_level
        set_global_log_level("DEBUG")
        logger.info("üîç –†–µ–∂–∏–º –æ—Ç–ª–∞–¥–∫–∏ –≤–∫–ª—é—á–µ–Ω")
    
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ Birthday Bot —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–æ–º...")
    run_watcher()
