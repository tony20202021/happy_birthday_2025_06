"""
–ú–æ–¥—É–ª—å —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è —Ä–µ—á–∏ –¥–ª—è Birthday Bot.
–ò—Å–ø–æ–ª—å–∑—É–µ—Ç OpenAI Whisper –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —Ç–µ–∫—Å—Ç.
–ü–æ–¥–¥–µ—Ä–∂–∫–∞ multi-GPU –¥–ª—è –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–≥–æ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è —Ä–µ—á–∏.
"""

import os
import asyncio
import time
import whisper
from pathlib import Path
from typing import Optional, Dict, Any, List
from contextlib import asynccontextmanager

from src.utils.config import config
from src.utils.logger import get_speech_logger
from src.speech.audio_processor import AudioProcessor

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ª–æ–≥–≥–µ—Ä–∞
logger = get_speech_logger()

class WhisperPool:
    """–ü—É–ª Whisper –º–æ–¥–µ–ª–µ–π –¥–ª—è –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–≥–æ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è —Ä–µ—á–∏."""
    
    def __init__(self, gpu_devices: List[str], model_name: str, language: str):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—É–ª–∞ Whisper –º–æ–¥–µ–ª–µ–π.
        
        Args:
            gpu_devices: –°–ø–∏—Å–æ–∫ GPU —É—Å—Ç—Ä–æ–π—Å—Ç–≤
            model_name: –ù–∞–∑–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏ Whisper
            language: –Ø–∑—ã–∫ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è
        """
        self.gpu_devices = gpu_devices
        self.model_name = model_name
        self.language = language
        self.models: Dict[str, Any] = {}
        self.available_devices = asyncio.Queue(maxsize=len(gpu_devices))
        self._initialized = False
        
        logger.info(f"üé§ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω Whisper –ø—É–ª —Å {len(gpu_devices)} —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞–º–∏: {gpu_devices}")
        logger.info(f"   –ú–æ–¥–µ–ª—å: {model_name}, –Ø–∑—ã–∫: {language}")
    
    async def initialize(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤—Å–µ—Ö Whisper –º–æ–¥–µ–ª–µ–π –¥–ª—è GPU."""
        if self._initialized:
            return
        
        logger.info("üì• –ó–∞–≥—Ä—É–∑–∫–∞ Whisper –º–æ–¥–µ–ª–µ–π –Ω–∞ –≤—Å–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞...")
        
        for device in self.gpu_devices:
            try:
                model = await self._load_model_for_device(device)
                if model:
                    self.models[device] = model
                    await self.available_devices.put(device)
                    logger.info(f"‚úÖ Whisper –º–æ–¥–µ–ª—å –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –¥–ª—è {device}")
                else:
                    logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å Whisper –º–æ–¥–µ–ª—å –¥–ª—è {device}")
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ Whisper –º–æ–¥–µ–ª–∏ –¥–ª—è {device}: {e}")
        
        self._initialized = True
        logger.info(f"üöÄ Whisper –ø—É–ª –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —Å {len(self.models)} –∞–∫—Ç–∏–≤–Ω—ã–º–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞–º–∏")
    
    async def _load_model_for_device(self, device: str):
        """–ó–∞–≥—Ä—É–∑–∫–∞ Whisper –º–æ–¥–µ–ª–∏ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞."""
        try:
            logger.debug(f"üì• –ó–∞–≥—Ä—É–∑–∫–∞ Whisper {self.model_name} –Ω–∞ {device}")
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –º–æ–¥–µ–ª—å –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
            loop = asyncio.get_event_loop()
            model = await loop.run_in_executor(
                None,
                whisper.load_model,
                self.model_name,
                device
            )
            
            return model
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ Whisper –º–æ–¥–µ–ª–∏ –¥–ª—è {device}: {e}")
            return None
    
    @asynccontextmanager
    async def acquire_device(self):
        """–ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è Whisper —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –∏–∑ –ø—É–ª–∞."""
        if not self._initialized:
            await self.initialize()
        
        # –ñ–¥–µ–º —Å–≤–æ–±–æ–¥–Ω–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ
        device = await self.available_devices.get()
        model = self.models.get(device)
        
        if not model:
            await self.available_devices.put(device)
            raise RuntimeError(f"Whisper –º–æ–¥–µ–ª—å –¥–ª—è {device} –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
        
        try:
            logger.debug(f"üîí –ü–æ–ª—É—á–µ–Ω –¥–æ—Å—Ç—É–ø –∫ Whisper {device}")
            yield device, model
        finally:
            # –û—á–∏—â–∞–µ–º –ø–∞–º—è—Ç—å –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –≤ –ø—É–ª
            self._cleanup_device_memory(device)
            await self.available_devices.put(device)
            logger.debug(f"üîì –û—Å–≤–æ–±–æ–∂–¥–µ–Ω Whisper {device}")
    
    def _cleanup_device_memory(self, device: str):
        """–û—á–∏—Å—Ç–∫–∞ –ø–∞–º—è—Ç–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞."""
        try:
            import torch
            import gc
            
            if device.startswith("cuda"):
                with torch.cuda.device(device):
                    torch.cuda.empty_cache()
            elif device == "mps":
                if hasattr(torch.mps, 'empty_cache'):
                    torch.mps.empty_cache()
            
            gc.collect()
            
        except Exception as e:
            logger.debug(f"–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –ø–∞–º—è—Ç–∏ Whisper {device}: {e}")
    
    def get_status(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –ø—É–ª–∞ Whisper."""
        return {
            "total_devices": len(self.gpu_devices),
            "available_devices": self.available_devices.qsize(),
            "busy_devices": len(self.gpu_devices) - self.available_devices.qsize(),
            "model_name": self.model_name,
            "language": self.language,
            "initialized": self._initialized
        }

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π –ø—É–ª Whisper (—Å–∏–Ω–≥–ª—Ç–æ–Ω)
_whisper_pool: Optional[WhisperPool] = None

def get_whisper_pool() -> WhisperPool:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ –ø—É–ª–∞ Whisper."""
    global _whisper_pool
    if _whisper_pool is None:
        gpu_devices = config.speech.gpu_devices
        if not gpu_devices:
            gpu_devices = ["cpu"]  # Fallback
        _whisper_pool = WhisperPool(
            gpu_devices=gpu_devices,
            model_name=config.speech.model_name,
            language=config.speech.language
        )
    return _whisper_pool

class SpeechToText:
    """–ö–ª–∞—Å—Å –¥–ª—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è —Ä–µ—á–∏ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º Whisper pool."""
    
    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–¥—É–ª—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è —Ä–µ—á–∏."""
        self.logger = get_speech_logger()
        self.audio_processor = AudioProcessor()
        self.whisper_pool = get_whisper_pool()
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –ø–æ–ª—è –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        self.model_name = config.speech.model_name
        self.language = config.speech.language
        
        self.logger.info(f"üé§ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è SpeechToText —Å multi-GPU –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π")
        self.logger.info(f"   –ú–æ–¥–µ–ª—å: {self.model_name}")
        self.logger.info(f"   –Ø–∑—ã–∫: {self.language}")
        self.logger.info(f"   GPU —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞: {config.speech.gpu_devices}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å Whisper
        if not self._check_whisper_availability():
            self.logger.error("‚ùå OpenAI Whisper –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
            raise ImportError("OpenAI Whisper –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: pip install openai-whisper")
    
    def _check_whisper_availability(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ Whisper."""
        try:
            import whisper
            available_models = whisper.available_models()
            
            if self.model_name not in available_models:
                self.logger.error(f"‚ùå –ú–æ–¥–µ–ª—å {self.model_name} –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞. –î–æ—Å—Ç—É–ø–Ω—ã–µ: {available_models}")
                return False
            
            self.logger.info(f"‚úÖ Whisper –¥–æ—Å—Ç—É–ø–µ–Ω, –º–æ–¥–µ–ª—å {self.model_name} –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è")
            return True
        except ImportError:
            return False
    
    async def transcribe_audio(self, audio_path: str, user_id: int = None) -> Optional[str]:
        """
        –¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä—É–µ—Ç –∞—É–¥–∏–æ—Ñ–∞–π–ª –≤ —Ç–µ–∫—Å—Ç —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º Whisper pool.
        
        Args:
            audio_path: –ü—É—Ç—å –∫ –∞—É–¥–∏–æ—Ñ–∞–π–ª—É
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è)
            
        Returns:
            Optional[str]: –†–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –∏–ª–∏ None –ø—Ä–∏ –æ—à–∏–±–∫–µ
        """
        start_time = time.time()
        
        try:
            if not Path(audio_path).exists():
                self.logger.error(f"‚ùå –ê—É–¥–∏–æ—Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {audio_path}")
                return None
            
            # –í–∞–ª–∏–¥–∏—Ä—É–µ–º –∞—É–¥–∏–æ—Ñ–∞–π–ª
            if not await self.audio_processor.validate_audio_file(audio_path):
                self.logger.error(f"‚ùå –ê—É–¥–∏–æ—Ñ–∞–π–ª –Ω–µ –ø—Ä–æ—à–µ–ª –≤–∞–ª–∏–¥–∞—Ü–∏—é: {audio_path}")
                return None
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞—É–¥–∏–æ
            audio_info = await self.audio_processor.get_audio_info(audio_path)
            duration = audio_info.get("duration_seconds", 0) if audio_info else 0
            
            self.logger.info(f"üé§ –ù–∞—á–∞–ª–æ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–∏: {audio_path}")
            self.logger.info(f"   –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {duration:.1f}—Å")
            if audio_info:
                self.logger.debug(f"   –ö–æ–¥–µ–∫: {audio_info.get('codec', 'unknown')}")
                self.logger.debug(f"   –ß–∞—Å—Ç–æ—Ç–∞: {audio_info.get('sample_rate', 'unknown')} Hz")
                self.logger.debug(f"   –ö–∞–Ω–∞–ª—ã: {audio_info.get('channels', 'unknown')}")
            
            # –ü—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∞ –∞—É–¥–∏–æ –¥–ª—è –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–π —Ä–∞–±–æ—Ç—ã —Å Whisper
            processed_audio_path = await self.audio_processor.prepare_for_whisper(audio_path)
            
            if not processed_audio_path:
                self.logger.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞—É–¥–∏–æ")
                return None
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—É–ª –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            if not self.whisper_pool._initialized:
                await self.whisper_pool.initialize()
            
            # –ü–æ–ª—É—á–∞–µ–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –∏–∑ –ø—É–ª–∞ –∏ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä—É–µ–º
            async with self.whisper_pool.acquire_device() as (device, model):
                self.logger.info(f"üéÆ –¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏—è –Ω–∞ {device}")
                
                # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏—é –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
                loop = asyncio.get_event_loop()
                result = await loop.run_in_executor(
                    None, 
                    self._transcribe_sync, 
                    model, 
                    processed_audio_path
                )
            
            # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π —Ñ–∞–π–ª –µ—Å–ª–∏ –æ–Ω –æ—Ç–ª–∏—á–∞–µ—Ç—Å—è –æ—Ç –æ—Ä–∏–≥–∏–Ω–∞–ª–∞
            if processed_audio_path != audio_path:
                try:
                    Path(processed_audio_path).unlink()
                    self.logger.debug(f"–£–¥–∞–ª–µ–Ω –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª: {processed_audio_path}")
                except Exception as e:
                    self.logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª {processed_audio_path}: {e}")
            
            processing_time = time.time() - start_time
            
            if result:
                self.logger.info(f"‚úÖ –¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –∑–∞ {processing_time:.2f}—Å")
                self.logger.debug(f"   –†–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç: {result[:100]}{'...' if len(result) > 100 else ''}")
                
                # –õ–æ–≥–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω–æ–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ
                if user_id:
                    self.logger.info(
                        f"user_id={user_id},"
                        f"audio_duration={duration},"
                        f"recognition_time={processing_time},"
                        f"success=True"
                    )
                
                return result
            else:
                self.logger.warning(f"‚ö†Ô∏è –¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏—è –Ω–µ –¥–∞–ª–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –∑–∞ {processing_time:.2f}—Å")
                
                # –õ–æ–≥–∏—Ä—É–µ–º –Ω–µ—É—Å–ø–µ—à–Ω–æ–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ
                if user_id:
                    self.logger.info(
                        f"user_id={user_id},"
                        f"audio_duration={duration},"
                        f"recognition_time={processing_time},"
                        f"success=False"
                    )
                
                return None
                
        except Exception as e:
            processing_time = time.time() - start_time
            self.logger.error(
                f"error={e},"
                f"context={{"
                f'"method": "transcribe_audio",'
                f'"audio_path": "{audio_path}",'
                f'"user_id": {user_id},'
                f'"processing_time": {processing_time}'
                f"}}"
            )
            return None
    
    def _transcribe_sync(self, model, audio_path: str) -> Optional[str]:
        """
        –°–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏—è –∞—É–¥–∏–æ (–≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ).
        
        Args:
            model: –ú–æ–¥–µ–ª—å Whisper
            audio_path: –ü—É—Ç—å –∫ –∞—É–¥–∏–æ—Ñ–∞–π–ª—É
            
        Returns:
            Optional[str]: –†–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
        """
        try:
            self.logger.debug(f"üîÑ –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–∏: {audio_path}")
            
            result = model.transcribe(
                audio_path,
                language=self.language,
                task="transcribe",
                # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –∫–∞—á–µ—Å—Ç–≤–∞
                temperature=0.0,  # –î–µ—Ç–µ—Ä–º–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                best_of=5,        # –í—ã–±–æ—Ä –ª—É—á—à–µ–≥–æ –∏–∑ 5 –ø–æ–ø—ã—Ç–æ–∫
                beam_size=5,      # –†–∞–∑–º–µ—Ä –ª—É—á–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞
                patience=1.0,     # –¢–µ—Ä–ø–µ–Ω–∏–µ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ
                # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –∫–æ—Ä–æ—Ç–∫–∏—Ö —Å–µ–≥–º–µ–Ω—Ç–æ–≤ –∏ —Ç–∏—à–∏–Ω—ã
                condition_on_previous_text=False,
                no_speech_threshold=0.6,
                logprob_threshold=-1.0,
                compression_ratio_threshold=2.4
            )
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏ –æ—á–∏—â–∞–µ–º —Ç–µ–∫—Å—Ç
            text = result.get("text", "").strip()
            
            if not text:
                self.logger.debug("‚ùå –†–µ–∑—É–ª—å—Ç–∞—Ç —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–∏ –ø—É—Å—Ç")
                return None
            
            # –ë–∞–∑–æ–≤–∞—è –ø–æ—Å—Ç–æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞
            text = self._post_process_text(text)
            
            return text if text else None
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–∏: {e}")
            return None
    
    def _post_process_text(self, text: str) -> str:
        """
        –ü–æ—Å—Ç–æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞.
        
        Args:
            text: –ò—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç
            
        Returns:
            str: –û–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
        """
        if not text:
            return ""
        
        # –£–¥–∞–ª—è–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã
        text = " ".join(text.split())
        
        # –£–¥–∞–ª—è–µ–º –∞—Ä—Ç–µ—Ñ–∞–∫—Ç—ã —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è
        artifacts = [
            "[BLANK_AUDIO]",
            "[NO_SPEECH]",
            "[MUSIC]",
            "[NOISE]",
            "‚ô™",
            "‚ô´",
            "(music)",
            "(noise)",
            "(silence)"
        ]
        
        for artifact in artifacts:
            text = text.replace(artifact, "")
        
        # –û—á–∏—â–∞–µ–º –ø–æ–≤—Ç–æ—Ä—è—é—â–∏–µ—Å—è –∑–Ω–∞–∫–∏ –ø—Ä–µ–ø–∏–Ω–∞–Ω–∏—è
        text = text.replace("...", ".")
        text = text.replace("!!", "!")
        text = text.replace("??", "?")
        text = text.replace(",,", ",")
        
        # –£–¥–∞–ª—è–µ–º –ø–æ–≤—Ç–æ—Ä—è—é—â–∏–µ—Å—è –ø—Ä–æ–±–µ–ª—ã –ø–æ—Å–ª–µ –æ—á–∏—Å—Ç–∫–∏
        text = " ".join(text.split())
        
        self.logger.debug(f"–ü–æ—Å—Ç–æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞: '{text}'")
        return text.strip()
    
    async def transcribe_telegram_voice(self, bot, voice_message, user_id: int) -> Optional[str]:
        """
        –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π Telegram.
        
        Args:
            bot: –≠–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞ Telegram
            voice_message: –û–±—ä–µ–∫—Ç –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            
        Returns:
            Optional[str]: –†–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
        """
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è
            if voice_message.duration > config.security.max_voice_duration:
                self.logger.warning(
                    f"‚ö†Ô∏è –ì–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ: {voice_message.duration}s "
                    f"(–º–∞–∫—Å. {config.security.max_voice_duration}s)"
                )
                return None
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞
            if voice_message.file_size > config.file.max_file_size:
                self.logger.warning(
                    f"‚ö†Ô∏è –ì–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–µ: {voice_message.file_size} bytes "
                    f"(–º–∞–∫—Å. {config.file.max_file_size} bytes)"
                )
                return None
            
            # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
            file = await bot.get_file(voice_message.file_id)
            
            # –°–æ–∑–¥–∞–µ–º –∏–º—è –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
            filename = f"voice_{user_id}_{int(time.time())}.ogg"
            audio_path = config.get_temp_audio_path(filename)
            
            self.logger.info(f"üì• –°–∫–∞—á–∏–≤–∞–Ω–∏–µ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Ñ–∞–π–ª–∞: {filename}")
            self.logger.debug(f"   File ID: {voice_message.file_id}")
            self.logger.debug(f"   –†–∞–∑–º–µ—Ä: {voice_message.file_size} bytes")
            self.logger.debug(f"   –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {voice_message.duration}s")
            
            # –°–∫–∞—á–∏–≤–∞–µ–º –∞—É–¥–∏–æ—Ñ–∞–π–ª
            await bot.download_file(file.file_path, audio_path)
            
            self.logger.info(f"‚úÖ –ì–æ–ª–æ—Å–æ–≤–æ–π —Ñ–∞–π–ª —Å–∫–∞—á–∞–Ω: {audio_path}")
            
            # –¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä—É–µ–º —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –ø—É–ª–∞
            result = await self.transcribe_audio(audio_path, user_id)
            
            # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
            try:
                Path(audio_path).unlink()
                self.logger.debug(f"–£–¥–∞–ª–µ–Ω –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª: {audio_path}")
            except Exception as e:
                self.logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª {audio_path}: {e}")
            
            return result
            
        except Exception as e:
            self.logger.error(
                f"error={e},"
                f"context={{"
                f'"method": "transcribe_telegram_voice",'
                f'"user_id": {user_id},'
                f'"voice_duration": {getattr(voice_message, "duration", "unknown")},'
                f'"voice_file_id": {getattr(voice_message, "file_id", "unknown")},'
                f'"voice_file_size": {getattr(voice_message, "file_size", "unknown")}'
            f"}}"
            )
            return None
    
    def get_model_info(self) -> dict:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏.
        
        Returns:
            dict: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–æ–¥–µ–ª–∏
        """
        model_info = {
            "model_name": self.model_name,
            "language": self.language,
            "gpu_devices": config.speech.gpu_devices,
            "whisper_pool_status": self.whisper_pool.get_status(),
        }
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —è–∑—ã–∫–∞—Ö
        try:
            if hasattr(whisper, 'tokenizer') and hasattr(whisper.tokenizer, 'LANGUAGES'):
                model_info["supported_languages"] = list(whisper.tokenizer.LANGUAGES.keys())
            else:
                # Fallback –¥–ª—è —Å—Ç–∞—Ä—ã—Ö –≤–µ—Ä—Å–∏–π
                model_info["supported_languages"] = ["ru", "en", "es", "fr", "de", "it", "pt", "zh", "ja", "ko"]
        except Exception:
            model_info["supported_languages"] = ["unknown"]
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–æ–¥–µ–ª—è—Ö
        try:
            model_info["available_models"] = whisper.available_models()
        except Exception:
            model_info["available_models"] = ["unknown"]
        
        return model_info
    
    async def check_model_health(self) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ –º–æ–¥–µ–ª–∏.
        
        Returns:
            bool: True –µ—Å–ª–∏ –º–æ–¥–µ–ª—å —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ
        """
        try:
            self.logger.info("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ Whisper –ø—É–ª–∞...")
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—É–ª –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            if not self.whisper_pool._initialized:
                await self.whisper_pool.initialize()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —É—Å—Ç—Ä–æ–π—Å—Ç–≤
            status = self.whisper_pool.get_status()
            if status["total_devices"] > 0 and status["initialized"]:
                self.logger.info("‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ Whisper –ø—É–ª–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ")
                return True
            else:
                self.logger.error("‚ùå Whisper –ø—É–ª –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –∏–ª–∏ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤")
                return False
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ Whisper –ø—É–ª–∞: {e}")
            return False
    
    def get_status(self) -> dict:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –º–æ–¥—É–ª—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è —Ä–µ—á–∏.
        
        Returns:
            dict: –°—Ç–∞—Ç—É—Å –º–æ–¥—É–ª—è
        """
        try:
            whisper_status = self.whisper_pool.get_status()
            
            return {
                "whisper_available": True,
                "model_name": self.model_name,
                "language": self.language,
                "gpu_devices": config.speech.gpu_devices,
                "whisper_pool_status": whisper_status,
                "audio_processor_available": self.audio_processor.check_ffmpeg_availability(),
                "max_audio_duration": config.speech.max_audio_duration,
                "supported_formats": config.speech.supported_formats
            }
        except Exception as e:
            return {
                "whisper_available": False,
                "error": str(e)
            }
    
    def __del__(self):
        """–î–µ—Å—Ç—Ä—É–∫—Ç–æ—Ä –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ —Ä–µ—Å—É—Ä—Å–æ–≤."""
        try:
            # –û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —á–µ—Ä–µ–∑ –ø—É–ª
            self.logger.debug("‚úÖ SpeechToText —Ä–µ—Å—É—Ä—Å—ã –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω—ã")
        except Exception as e:
            if hasattr(self, 'logger'):
                self.logger.debug(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏–∏ —Ä–µ—Å—É—Ä—Å–æ–≤ SpeechToText: {e}")
                