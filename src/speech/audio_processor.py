"""
–ú–æ–¥—É–ª—å –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞—É–¥–∏–æ—Ñ–∞–π–ª–æ–≤ –¥–ª—è Birthday Bot.
–ò—Å–ø–æ–ª—å–∑—É–µ—Ç imageio-ffmpeg –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞—É–¥–∏–æ.
"""

import os
import asyncio
import subprocess
import time
from pathlib import Path
from typing import Optional, Dict, Any

from src.utils.config import config
from src.utils.logger import get_speech_logger

class AudioProcessor:
    """–ö–ª–∞—Å—Å –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞—É–¥–∏–æ—Ñ–∞–π–ª–æ–≤."""
    
    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –∞—É–¥–∏–æ."""
        self.logger = get_speech_logger()
        self.ffmpeg_path = self._get_ffmpeg_path()
        
        self.logger.info(f"üéµ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è AudioProcessor")
        if self.ffmpeg_path:
            self.logger.info(f"   FFmpeg: {self.ffmpeg_path}")
        else:
            self.logger.warning("   FFmpeg: –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
    
    def _get_ffmpeg_path(self) -> Optional[str]:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—É—Ç–∏ –∫ FFmpeg –∏–∑ –ø–∞–∫–µ—Ç–∞ imageio-ffmpeg.
        
        Returns:
            Optional[str]: –ü—É—Ç—å –∫ FFmpeg –∏–ª–∏ None –ø—Ä–∏ –æ—à–∏–±–∫–µ
        """
        try:
            import imageio_ffmpeg
            ffmpeg_path = imageio_ffmpeg.get_ffmpeg_exe()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å FFmpeg
            result = subprocess.run(
                [ffmpeg_path, "-version"], 
                capture_output=True, 
                text=True,
                timeout=10
            )
            
            if result.returncode == 0:
                # –ò–∑–≤–ª–µ–∫–∞–µ–º –≤–µ—Ä—Å–∏—é FFmpeg –∏–∑ –≤—ã–≤–æ–¥–∞
                version_line = result.stdout.split('\n')[0]
                self.logger.info(f"‚úÖ FFmpeg –Ω–∞–π–¥–µ–Ω: {version_line}")
                return ffmpeg_path
            else:
                self.logger.error(f"‚ùå FFmpeg –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç: {result.stderr}")
                return None
                
        except ImportError:
            self.logger.error("‚ùå imageio-ffmpeg –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: pip install imageio-ffmpeg")
            return None
        except subprocess.TimeoutExpired:
            self.logger.error("‚ùå Timeout –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ FFmpeg")
            return None
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—É—Ç–∏ –∫ FFmpeg: {e}")
            return None
    
    async def get_audio_info(self, file_path: str) -> Optional[Dict[str, Any]]:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∞—É–¥–∏–æ—Ñ–∞–π–ª–µ.
        
        Args:
            file_path: –ü—É—Ç—å –∫ –∞—É–¥–∏–æ—Ñ–∞–π–ª—É
            
        Returns:
            Optional[Dict]: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∞—É–¥–∏–æ—Ñ–∞–π–ª–µ
        """
        if not self.ffmpeg_path:
            self.logger.error("‚ùå FFmpeg –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∞—É–¥–∏–æ")
            return None
        
        try:
            cmd = [
                self.ffmpeg_path,
                "-i", file_path,
                "-hide_banner",
                "-f", "null",
                "-"
            ]
            
            self.logger.debug(f"üîç –ê–Ω–∞–ª–∏–∑ –∞—É–¥–∏–æ—Ñ–∞–π–ª–∞: {file_path}")
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –∫–æ–º–∞–Ω–¥—É –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ
            process = await asyncio.create_subprocess_exec(
                *cmd,
                stdout=asyncio.subprocess.PIPE,
                stderr=asyncio.subprocess.PIPE
            )
            
            stdout, stderr = await process.communicate()
            stderr_text = stderr.decode('utf-8', errors='replace')
            
            # –ü–∞—Ä—Å–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ –≤—ã–≤–æ–¥–∞ FFmpeg
            info = {
                "format": None,
                "codec": None,
                "duration": None,
                "duration_seconds": 0.0,
                "channels": None,
                "sample_rate": None,
                "bitrate": None,
                "file_size": os.path.getsize(file_path) if os.path.exists(file_path) else 0
            }
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–µ/—Ñ–æ—Ä–º–∞—Ç–µ
            if "Input #0" in stderr_text:
                input_lines = [line for line in stderr_text.splitlines() if "Input #0" in line]
                if input_lines:
                    input_line = input_lines[0]
                    if ", " in input_line:
                        format_part = input_line.split(", ")[0]
                        if "from" in format_part:
                            info["format"] = format_part.split("from")[0].strip().split()[-1]
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–æ–¥–µ–∫ –∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∞—É–¥–∏–æ
            if "Audio:" in stderr_text:
                audio_lines = [line for line in stderr_text.splitlines() if "Audio:" in line]
                if audio_lines:
                    audio_line = audio_lines[0]
                    parts = audio_line.split("Audio:")[1].strip().split(",")
                    
                    if parts:
                        info["codec"] = parts[0].strip()
                    
                    # –ß–∞—Å—Ç–æ—Ç–∞ –¥–∏—Å–∫—Ä–µ—Ç–∏–∑–∞—Ü–∏–∏
                    for part in parts:
                        if "Hz" in part:
                            try:
                                sample_rate_str = part.strip().split()[0]
                                info["sample_rate"] = int(sample_rate_str)
                            except (ValueError, IndexError):
                                pass
                    
                    # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞–Ω–∞–ª–æ–≤
                    if "mono" in audio_line.lower():
                        info["channels"] = 1
                    elif "stereo" in audio_line.lower():
                        info["channels"] = 2
                    else:
                        # –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ —á–∏—Å–ª–æ –∫–∞–Ω–∞–ª–æ–≤
                        for part in parts:
                            if "channel" in part.lower():
                                try:
                                    channels_str = part.strip().split()[0]
                                    info["channels"] = int(channels_str)
                                except (ValueError, IndexError):
                                    pass
                    
                    # –ë–∏—Ç—Ä–µ–π—Ç
                    for part in parts:
                        if "kb/s" in part.lower():
                            try:
                                bitrate_str = part.strip().split()[0]
                                info["bitrate"] = f"{bitrate_str} kb/s"
                            except (ValueError, IndexError):
                                pass
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
            if "Duration:" in stderr_text:
                duration_lines = [line for line in stderr_text.splitlines() if "Duration:" in line]
                if duration_lines:
                    duration_line = duration_lines[0]
                    try:
                        duration_part = duration_line.split("Duration:")[1].split(",")[0].strip()
                        info["duration"] = duration_part
                        
                        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ —Å–µ–∫—É–Ω–¥—ã
                        time_parts = duration_part.split(":")
                        if len(time_parts) >= 3:
                            hours = float(time_parts[0])
                            minutes = float(time_parts[1])
                            seconds = float(time_parts[2])
                            info["duration_seconds"] = hours * 3600 + minutes * 60 + seconds
                    except (ValueError, IndexError) as e:
                        self.logger.debug(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏: {e}")
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –æ–±—â–∏–π –±–∏—Ç—Ä–µ–π—Ç –µ—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –≤ –∞—É–¥–∏–æ –ø–æ—Ç–æ–∫–µ
            if not info["bitrate"] and "bitrate:" in stderr_text.lower():
                for line in stderr_text.splitlines():
                    if "bitrate:" in line.lower():
                        try:
                            bitrate_part = line.lower().split("bitrate:")[1].strip().split()[0]
                            info["bitrate"] = bitrate_part
                        except IndexError:
                            pass
                        break
            
            self.logger.debug(f"‚úÖ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∞—É–¥–∏–æ –ø–æ–ª—É—á–µ–Ω–∞: {info}")
            return info
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∞—É–¥–∏–æ {file_path}: {e}")
            return None
    
    async def convert_audio(self, input_file: str, output_file: str = None, 
                          sample_rate: int = 16000, channels: int = 1) -> Optional[str]:
        """
        –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –∞—É–¥–∏–æ—Ñ–∞–π–ª–∞ –≤ –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–ª—è Whisper.
        
        Args:
            input_file: –ü—É—Ç—å –∫ –≤—Ö–æ–¥–Ω–æ–º—É —Ñ–∞–π–ª—É
            output_file: –ü—É—Ç—å –∫ –≤—ã—Ö–æ–¥–Ω–æ–º—É —Ñ–∞–π–ª—É (–µ—Å–ª–∏ None, –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏)
            sample_rate: –ß–∞—Å—Ç–æ—Ç–∞ –¥–∏—Å–∫—Ä–µ—Ç–∏–∑–∞—Ü–∏–∏
            channels: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞–Ω–∞–ª–æ–≤
            
        Returns:
            Optional[str]: –ü—É—Ç—å –∫ —Å–∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–º—É —Ñ–∞–π–ª—É
        """
        if not self.ffmpeg_path:
            self.logger.error("‚ùå FFmpeg –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏")
            return None
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–º—è –≤—ã—Ö–æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ –µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω–æ
        if output_file is None:
            input_path = Path(input_file)
            timestamp = int(time.time())
            output_file = str(input_path.parent / f"{input_path.stem}_converted_{timestamp}.wav")
        
        try:
            cmd = [
                self.ffmpeg_path,
                "-y",                    # –ü–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ñ–∞–π–ª—ã
                "-i", input_file,        # –í—Ö–æ–¥–Ω–æ–π —Ñ–∞–π–ª
                "-ar", str(sample_rate), # –ß–∞—Å—Ç–æ—Ç–∞ –¥–∏—Å–∫—Ä–µ—Ç–∏–∑–∞—Ü–∏–∏
                "-ac", str(channels),    # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞–Ω–∞–ª–æ–≤
                "-c:a", "pcm_s16le",    # 16-bit PCM –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ
                "-f", "wav",            # –§–æ—Ä–º–∞—Ç WAV
                "-loglevel", "error",   # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –≤—ã–≤–æ–¥
                output_file             # –í—ã—Ö–æ–¥–Ω–æ–π —Ñ–∞–π–ª
            ]
            
            self.logger.info(f"üîÑ –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –∞—É–¥–∏–æ: {Path(input_file).name} -> {Path(output_file).name}")
            self.logger.debug(f"   –ü–∞—Ä–∞–º–µ—Ç—Ä—ã: {sample_rate}Hz, {channels} –∫–∞–Ω–∞–ª(–æ–≤)")
            self.logger.debug(f"   –ö–æ–º–∞–Ω–¥–∞: {' '.join(cmd)}")
            
            start_time = time.time()
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—é –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ
            process = await asyncio.create_subprocess_exec(
                *cmd,
                stdout=asyncio.subprocess.PIPE,
                stderr=asyncio.subprocess.PIPE
            )
            
            stdout, stderr = await process.communicate()
            conversion_time = time.time() - start_time
            
            if process.returncode != 0:
                error_msg = stderr.decode('utf-8', errors='replace')
                self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ FFmpeg –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏: {error_msg}")
                return None
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ–∞–π–ª —Å–æ–∑–¥–∞–Ω –∏ –Ω–µ –ø—É—Å—Ç–æ–π
            if os.path.exists(output_file) and os.path.getsize(output_file) > 0:
                output_size = os.path.getsize(output_file)
                self.logger.info(f"‚úÖ –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –∑–∞ {conversion_time:.2f}—Å")
                self.logger.debug(f"   –í—ã—Ö–æ–¥–Ω–æ–π —Ñ–∞–π–ª: {output_file}")
                self.logger.debug(f"   –†–∞–∑–º–µ—Ä: {output_size} bytes")
                return output_file
            else:
                self.logger.error(f"‚ùå –í—ã—Ö–æ–¥–Ω–æ–π —Ñ–∞–π–ª –ø—É—Å—Ç –∏–ª–∏ –Ω–µ —Å–æ–∑–¥–∞–Ω: {output_file}")
                return None
                
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –∞—É–¥–∏–æ: {e}")
            return None
    
    async def prepare_for_whisper(self, audio_path: str) -> Optional[str]:
        """
        –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∞—É–¥–∏–æ—Ñ–∞–π–ª–∞ –¥–ª—è –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–π —Ä–∞–±–æ—Ç—ã —Å Whisper.
        
        Args:
            audio_path: –ü—É—Ç—å –∫ –∏—Å—Ö–æ–¥–Ω–æ–º—É –∞—É–¥–∏–æ—Ñ–∞–π–ª—É
            
        Returns:
            Optional[str]: –ü—É—Ç—å –∫ –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–Ω–æ–º—É —Ñ–∞–π–ª—É
        """
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∏—Å—Ö–æ–¥–Ω–æ–º —Ñ–∞–π–ª–µ
            audio_info = await self.get_audio_info(audio_path)
            
            if not audio_info:
                self.logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞—É–¥–∏–æ: {audio_path}")
                return audio_path
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–∞ –ª–∏ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è
            needs_conversion = False
            conversion_reasons = []
            
            # –û–ø—Ç–∏–º–∞–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è Whisper
            target_sample_rate = 16000
            target_channels = 1
            target_codec = "pcm_s16le"
            
            current_sample_rate = audio_info.get("sample_rate")
            current_channels = audio_info.get("channels")
            current_codec = audio_info.get("codec")
            
            if current_sample_rate != target_sample_rate:
                needs_conversion = True
                conversion_reasons.append(f"—á–∞—Å—Ç–æ—Ç–∞ {current_sample_rate}Hz -> {target_sample_rate}Hz")
            
            if current_channels != target_channels:
                needs_conversion = True
                conversion_reasons.append(f"–∫–∞–Ω–∞–ª—ã {current_channels} -> {target_channels}")
            
            if current_codec and target_codec not in current_codec.lower():
                needs_conversion = True
                conversion_reasons.append(f"–∫–æ–¥–µ–∫ {current_codec} -> {target_codec}")
            
            # –ï—Å–ª–∏ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –Ω–µ –Ω—É–∂–Ω–∞, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π —Ñ–∞–π–ª
            if not needs_conversion:
                self.logger.debug(f"‚úÖ –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è: {audio_path}")
                return audio_path
            
            self.logger.info(f"üîß –¢—Ä–µ–±—É–µ—Ç—Å—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è: {', '.join(conversion_reasons)}")
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—é
            converted_path = await self.convert_audio(
                input_file=audio_path,
                sample_rate=target_sample_rate,
                channels=target_channels
            )
            
            if converted_path:
                self.logger.info(f"‚úÖ –ê—É–¥–∏–æ –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–æ –¥–ª—è Whisper: {Path(converted_path).name}")
                return converted_path
            else:
                self.logger.warning(f"‚ö†Ô∏è –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π —Ñ–∞–π–ª: {audio_path}")
                return audio_path
                
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –∞—É–¥–∏–æ –¥–ª—è Whisper: {e}")
            return audio_path
    
    async def validate_audio_file(self, file_path: str) -> bool:
        """
        –í–∞–ª–∏–¥–∞—Ü–∏—è –∞—É–¥–∏–æ—Ñ–∞–π–ª–∞.
        
        Args:
            file_path: –ü—É—Ç—å –∫ –∞—É–¥–∏–æ—Ñ–∞–π–ª—É
            
        Returns:
            bool: True –µ—Å–ª–∏ —Ñ–∞–π–ª –≤–∞–ª–∏–¥–µ–Ω
        """
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
            if not os.path.exists(file_path):
                self.logger.error(f"‚ùå –ê—É–¥–∏–æ—Ñ–∞–π–ª –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {file_path}")
                return False
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞
            file_size = os.path.getsize(file_path)
            if file_size == 0:
                self.logger.error(f"‚ùå –ê—É–¥–∏–æ—Ñ–∞–π–ª –ø—É—Å—Ç: {file_path}")
                return False
            
            if file_size > config.file.max_file_size:
                self.logger.error(f"‚ùå –ê—É–¥–∏–æ—Ñ–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π: {file_size} bytes (–º–∞–∫—Å. {config.file.max_file_size} bytes)")
                return False
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ —Ñ–∞–π–ª–∞
            file_extension = Path(file_path).suffix.lower()
            if file_extension not in config.speech.supported_formats:
                self.logger.error(f"‚ùå –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞: {file_extension}")
                return False
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞—É–¥–∏–æ
            audio_info = await self.get_audio_info(file_path)
            if not audio_info:
                self.logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞—É–¥–∏–æ: {file_path}")
                return False
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
            duration = audio_info.get("duration_seconds", 0)
            if duration > config.speech.max_audio_duration:
                self.logger.error(f"‚ùå –ê—É–¥–∏–æ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ: {duration}s (–º–∞–∫—Å. {config.speech.max_audio_duration}s)")
                return False
            
            if duration == 0:
                self.logger.error(f"‚ùå –ê—É–¥–∏–æ –∏–º–µ–µ—Ç –Ω—É–ª–µ–≤—É—é –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {file_path}")
                return False
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –∞—É–¥–∏–æ—Ñ–∞–π–ª
            if not audio_info.get("codec"):
                self.logger.error(f"‚ùå –§–∞–π–ª –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –∞—É–¥–∏–æ –ø–æ—Ç–æ–∫–∞: {file_path}")
                return False
            
            self.logger.debug(f"‚úÖ –ê—É–¥–∏–æ—Ñ–∞–π–ª –≤–∞–ª–∏–¥–µ–Ω: {Path(file_path).name}")
            return True
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∞—É–¥–∏–æ—Ñ–∞–π–ª–∞ {file_path}: {e}")
            return False
    
    def check_ffmpeg_availability(self) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ FFmpeg.
        
        Returns:
            bool: True –µ—Å–ª–∏ FFmpeg –¥–æ—Å—Ç—É–ø–µ–Ω
        """
        return self.ffmpeg_path is not None
    
    def get_supported_formats(self) -> list:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤.
        
        Returns:
            list: –°–ø–∏—Å–æ–∫ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–π —Ñ–∞–π–ª–æ–≤
        """
        return config.speech.supported_formats
    
    async def cleanup_temp_files(self, max_age_seconds: int = None):
        """
        –û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –∞—É–¥–∏–æ—Ñ–∞–π–ª–æ–≤.
        
        Args:
            max_age_seconds: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç —Ñ–∞–π–ª–æ–≤ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
        """
        if max_age_seconds is None:
            max_age_seconds = config.file.max_temp_file_age
        
        try:
            temp_dir = Path(config.speech.temp_audio_dir)
            if not temp_dir.exists():
                self.logger.debug(f"–í—Ä–µ–º–µ–Ω–Ω–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {temp_dir}")
                return
            
            current_time = time.time()
            cleaned_count = 0
            total_size_cleaned = 0
            
            # –û—á–∏—â–∞–µ–º —Ñ–∞–π–ª—ã –ø–æ –º–∞—Å–∫–µ
            patterns = ["voice_*.ogg", "*_converted_*.wav", "temp_audio_*.*"]
            
            for pattern in patterns:
                for file_path in temp_dir.glob(pattern):
                    if file_path.is_file():
                        try:
                            file_age = current_time - file_path.stat().st_mtime
                            if file_age > max_age_seconds:
                                file_size = file_path.stat().st_size
                                file_path.unlink()
                                cleaned_count += 1
                                total_size_cleaned += file_size
                                self.logger.debug(f"–£–¥–∞–ª–µ–Ω —Å—Ç–∞—Ä—ã–π —Ñ–∞–π–ª: {file_path.name} ({file_size} bytes)")
                        except Exception as e:
                            self.logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Ñ–∞–π–ª {file_path}: {e}")
            
            if cleaned_count > 0:
                size_mb = total_size_cleaned / (1024 * 1024)
                self.logger.info(f"üßπ –û—á–∏—â–µ–Ω–æ {cleaned_count} –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –∞—É–¥–∏–æ—Ñ–∞–π–ª–æ–≤ ({size_mb:.2f} MB)")
            else:
                self.logger.debug("–ù–µ—Ç —Å—Ç–∞—Ä—ã—Ö –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –¥–ª—è –æ—á–∏—Å—Ç–∫–∏")
                
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤: {e}")
    
    def get_status(self) -> dict:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∞—É–¥–∏–æ–ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞.
        
        Returns:
            dict: –°—Ç–∞—Ç—É—Å –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
        """
        return {
            "ffmpeg_available": self.check_ffmpeg_availability(),
            "ffmpeg_path": self.ffmpeg_path,
            "supported_formats": self.get_supported_formats(),
            "max_file_size": config.file.max_file_size,
            "max_audio_duration": config.speech.max_audio_duration,
            "temp_dir": config.speech.temp_audio_dir
        }
    
    async def get_detailed_audio_analysis(self, file_path: str) -> Optional[Dict[str, Any]]:
        """
        –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∞—É–¥–∏–æ—Ñ–∞–π–ª–∞ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏.
        
        Args:
            file_path: –ü—É—Ç—å –∫ –∞—É–¥–∏–æ—Ñ–∞–π–ª—É
            
        Returns:
            Optional[Dict]: –î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∞—É–¥–∏–æ—Ñ–∞–π–ª–µ
        """
        if not self.ffmpeg_path:
            return None
        
        try:
            cmd = [
                self.ffmpeg_path,
                "-i", file_path,
                "-hide_banner",
                "-f", "null",
                "-v", "info",
                "-"
            ]
            
            process = await asyncio.create_subprocess_exec(
                *cmd,
                stdout=asyncio.subprocess.PIPE,
                stderr=asyncio.subprocess.PIPE
            )
            
            stdout, stderr = await process.communicate()
            stderr_text = stderr.decode('utf-8', errors='replace')
            
            # –ë–∞–∑–æ–≤–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
            basic_info = await self.get_audio_info(file_path)
            if not basic_info:
                return None
            
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
            detailed_info = basic_info.copy()
            detailed_info.update({
                "ffmpeg_output": stderr_text,
                "file_path": file_path,
                "file_name": Path(file_path).name,
                "file_extension": Path(file_path).suffix,
                "analysis_timestamp": time.time()
            })
            
            return detailed_info
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ –∞—É–¥–∏–æ: {e}")
            return None
            